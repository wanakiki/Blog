<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mogeko`s Blog on Mogeko`s Blog</title>
    <link>https://mogeko.me/</link>
    <description>Recent content in Mogeko`s Blog on Mogeko`s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 18 Apr 2019 15:08:49 +0800</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Rust 交叉编译</title>
      <link>https://mogeko.me/2019/053/</link>
      <pubDate>Thu, 18 Apr 2019 15:08:49 +0800</pubDate>
      
      <guid>https://mogeko.me/2019/053/</guid>
      <description>

&lt;!-- 
&lt;img alt=&#34;&#34; src=&#34;https://mogeko.github.io/images/053/&#34; &gt;
&lt;span class=&#34;spoiler&#34; &gt;&lt;/span&gt;
&amp;emsp;&amp;emsp;
 --&gt;

&lt;p&gt;事情的起因要从一个叫 &lt;a href=&#34;https://github.com/timvisee/ffsend&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;ffsend&lt;/a&gt; 的软件说起。ffsend 是一个用来操作 &lt;a href=&#34;https://send.firefox.com&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Firefox Send&lt;/a&gt; 的命令行工具，而 Firefox Send 是 Mozilla 推出的一款带有“阅后即焚”功能的文件分享工具；换句话说，用 ffsend 可以很方便的在命令行中分享 2.5GB 以下的任意文件。
我希望能在 Android 手机上通过 Termux 来使用 ffsend，不过 ffsend 的 &lt;a href=&#34;https://github.com/timvisee/ffsend/releases&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;GitHub Releases&lt;/a&gt; 中并没有提供任何 ARM 架构的二进制可执行文件。&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;GitHub Releases&#34; src=&#34;https://mogeko.github.io/images/053/ffsend-releases_1.png&#34; &gt;&lt;/p&gt;

&lt;p&gt;“源码都给你了，没有 ARM 架构的版本自己编译一个不就有了？”&lt;/p&gt;

&lt;p&gt;话是这么说，不过在 Termux 中编译并不见得是个好的方案。首先，你必须要安装一个大概 200M 的  rust，然后你还要下载各种编译时依赖，大概 160M；这一切就仅仅是为了一个 13.3M 大小的小应用。幸好还只是小应用，如果是更大的项目，已手机 CPU 的那点性能可能要编译一天。&lt;/p&gt;

&lt;p&gt;交叉编译正好可以解决这一问题。得益于 gcc 等跨平台编译器 (链接器) 和 rust 的发展，我们可以很轻松的通过交叉编译的方式在电脑上编译出能在手机上运行的版本。&lt;/p&gt;

&lt;h2 id=&#34;前期准备&#34;&gt;前期准备&lt;/h2&gt;

&lt;p&gt;首先，我们需要下载编译能够在 ARM 平台运行的软件所必须的运行库，也就是 &lt;code&gt;target&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;在命令行中运行&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rustup target list
aarch64-apple-ios
aarch64-fuchsia
aarch64-linux-android (installed)
aarch64-unknown-cloudabi
aarch64-unknown-linux-gnu
aarch64-unknown-linux-musl
arm-linux-androideabi
arm-unknown-linux-gnueabi
arm-unknown-linux-gnueabihf
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这会为我们列出已经安装的和可以被安装运行库。&lt;/p&gt;

&lt;p&gt;选择我们所需要的 &lt;code&gt;aarch64-linux-android&lt;/code&gt;，使用以下命令安装&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rustup target add aarch64-linux-android
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后我们还需要安装合适的链接器来配合 &lt;code&gt;target&lt;/code&gt; 工作。对于 rust 这类比较贴近于硬件的语言，Google 为开发者们提供了一套完整的开发包，也就是 Android NDK；不过 Google 并没有提供独立的交叉编译工具链，但是我们可以自己从 Android NDK 中编译一份出来 (参考&lt;a href=&#34;https://developer.android.com/ndk/guides/standalone_toolchain&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;这篇文档&lt;/a&gt;)。&lt;/p&gt;

&lt;p&gt;这是我从 Android NDK 中编译出来的一份用于交叉编译的工具链，目前只支持 Linux：&lt;a href=&#34;https://github.com/Mogeko/android-toolchain/releases/latest&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;GitHub Releases&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我手机的架构是 aarch64 (arm64)，所以我应该下载的工具链是 &lt;code&gt;android-toolchain-linux-x86_64-arm64.tgz&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;&lt;a href=&#34;https://github.com/Mogeko/android-toolchain/releases/download/4.9/android-toolchain-linux-x86_64-arm64.tgz&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;点击下载&lt;/a&gt;&lt;/del&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;用 Chrome 浏览器进行下载会报错，推荐在命令行中用 &lt;code&gt;wget&lt;/code&gt; 或 &lt;code&gt;curl&lt;/code&gt; 等工具下载&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ wget https://github.com/Mogeko/android-toolchain/releases/download/4.9/android-toolchain-linux-x86_64-arm64.tgz
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;下载好后将其解压，然后将 &lt;code&gt;android-toolchain/&amp;lt;arch&amp;gt;/bin&lt;/code&gt; 放入 &lt;code&gt;$PATH&lt;/code&gt; 中。&lt;/p&gt;

&lt;p&gt;至此，前期的准备工作就完成了。&lt;/p&gt;

&lt;h2 id=&#34;实验交叉编译&#34;&gt;实验交叉编译&lt;/h2&gt;

&lt;p&gt;我们需要先确保我们安装的 rust 运行库和编译工具链能够正常工作，顺便也可以讲解以下使用 rust 交叉编译的具体流程。&lt;/p&gt;

&lt;p&gt;我们先用 &lt;code&gt;cargo&lt;/code&gt;，新建一个最简单的项目&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo new hello
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个项目的作用就是输出 &lt;code&gt;Hello, World&lt;/code&gt; (使用 &lt;code&gt;cargo&lt;/code&gt; 新建二进制项目时的示例代码)&lt;/p&gt;

&lt;p&gt;然后，进入目录 &lt;code&gt;hello/src&lt;/code&gt;，也就是项目源码的目录。使用 &lt;code&gt;rustc&lt;/code&gt; 进行编译&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rustc -C linker=&amp;quot;aarch64-linux-android-gcc&amp;quot; --target=&amp;quot;aarch64-linux-android&amp;quot; main.rs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们可以看到一个被编译好的二进制文件 &lt;code&gt;main&lt;/code&gt;，将其拷贝到手机上，便可以用 Termux 运行了。&lt;/p&gt;

&lt;p&gt;这里的命令应该很好理解，相当于告诉 &lt;code&gt;rustc&lt;/code&gt; 用 &lt;code&gt;aarch64-linux-android-gcc&lt;/code&gt; 作为链接器，用 &lt;code&gt;aarch64-linux-android&lt;/code&gt; 作为运行库来编译 &lt;code&gt;main.rs&lt;/code&gt;，这样编译出来的程序自然是能在 aarch64 (arm64) 架构下运行了。&lt;/p&gt;

&lt;p&gt;不过一般人都不会直接用 &lt;code&gt;rustc&lt;/code&gt; 来编译程序，而是用 &lt;code&gt;cargo&lt;/code&gt; 来管理 rust 项目。我们也可以使用 &lt;code&gt;cargo&lt;/code&gt; 来进行交叉编译，只需要在项目的根目录中新建文件 &lt;code&gt;.cargo/config&lt;/code&gt;，填写上如下的内容&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[target.aarch64-linux-android]
linker = &amp;quot;aarch64-linux-android-gcc&amp;quot;
ar = &amp;quot;aarch64-linux-android-ar&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后使用以下命令进行编译&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bsah&#34;&gt;$ cargo build --target=&amp;quot;aarch64-linux-android&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编译好的二进制文件在 &lt;code&gt;hello/target/aarch64-linux-android/debug&lt;/code&gt; 里。&lt;/p&gt;

&lt;p&gt;将其拷贝到 Android 手机上用 Termux 运行&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;Run with Termux&#34; src=&#34;https://mogeko.github.io/images/053/termux_1.png&#34; &gt;&lt;/p&gt;

&lt;p&gt;我们可以在 &lt;code&gt;.cargo/config&lt;/code&gt; 中添加多条不同 &lt;code&gt;target&lt;/code&gt; 的配置，然后在编译时通过 &lt;code&gt;--target=&lt;/code&gt; 参数传递给 &lt;code&gt;cargo&lt;/code&gt; 来实现灵活的跨平台编译。&lt;/p&gt;

&lt;p&gt;例如，这条配置可以编译能在 Windows 中运行的程序 (工具链需要单独下载)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[target.x86_64-pc-windows-gnu]
linker = &amp;quot;x86_64-w64-mingw32-gcc&amp;quot;
ar = &amp;quot;x86_64-w64-mingw32-ar&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo build --target=&amp;quot;x86_64-pc-windows-gnu&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;编译-ffsend&#34;&gt;编译 ffsend&lt;/h2&gt;

&lt;p&gt;首先去 ffsend 的 GitHub Release 下载最新版 ffsend 的源码，并解压&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;GitHub Releases&#34; src=&#34;https://mogeko.github.io/images/053/ffsend-releases_2.png&#34; &gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ wget https://github.com/timvisee/ffsend/archive/v0.2.44.tar.gz
$ tar xvzf v0.2.44.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;进入文件夹 &lt;code&gt;ffsend-0.2.44&lt;/code&gt;，新建文件 &lt;code&gt;.cargo/config&lt;/code&gt;，配置 &lt;code&gt;target&lt;/code&gt; 和工具链。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[target.aarch64-linux-android]
linker = &amp;quot;aarch64-linux-android-gcc&amp;quot;
ar = &amp;quot;aarch64-linux-android-ar&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装编译所需要的依赖&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo apt install build-essential cmake pkg-config libssl-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用 &lt;code&gt;cargo&lt;/code&gt; 进行交叉编译&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo build --target=&amp;quot;aarch64-linux-android&amp;quot; --release
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将编译好的文件 (&lt;code&gt;ffsend-0.2.44/target/aarch64-linux-android/&lt;/code&gt;) 拷贝到 Android 手机上运行即可&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;Run with Termux&#34; src=&#34;https://mogeko.github.io/images/053/termux_2.png&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>纪念一位英雄的落幕</title>
      <link>https://mogeko.me/2019/052/</link>
      <pubDate>Fri, 12 Apr 2019 00:01:00 +0800</pubDate>
      
      <guid>https://mogeko.me/2019/052/</guid>
      <description>&lt;!-- 
&lt;img alt=&#34;&#34; src=&#34;https://mogeko.github.io/images/052/&#34; &gt;
&lt;span class=&#34;spoiler&#34; &gt;&lt;/span&gt;
&amp;emsp;&amp;emsp;
 --&gt;

&lt;p&gt;一个澳大利亚人莫名其妙的触犯了瑞典的法律，在美国的威胁下，最终因为厄瓜多尔的背叛在英国被捕。&lt;/p&gt;

&lt;p&gt;这位揭露了世界上最大阴谋的英雄居然被这个世界逼得走投无路，最终难逃牢狱之灾；而真正犯下战争罪行的人却可以堂而皇之地在安理会上喊着自己是 “The force of freedom and democracy”！&lt;/p&gt;

&lt;p&gt;这个世界运转的规则就是不欢迎说敢真话的人！&lt;/p&gt;

&lt;p&gt;希望阿桑奇能活下来&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;Julian Paul Assange&#34; src=&#34;https://mogeko.github.io/images/052/Julian.Assange.jpg&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rust 生命周期中的一些坑</title>
      <link>https://mogeko.me/2019/051/</link>
      <pubDate>Thu, 04 Apr 2019 21:17:33 +0800</pubDate>
      
      <guid>https://mogeko.me/2019/051/</guid>
      <description>

&lt;!-- 
&lt;img alt=&#34;&#34; src=&#34;https://mogeko.github.io/images/051/&#34; &gt;
&lt;span class=&#34;spoiler&#34; &gt;&lt;/span&gt;
&amp;emsp;&amp;emsp;
 --&gt;

&lt;p&gt;前面有一篇文章介绍了&lt;a href=&#34;https://mogeko.github.io/2019/050/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;什么是 Rust 的生命周期？&lt;/a&gt;这里补充一些关于 Rust 的生命周期不容易被注意到的细节。&lt;/p&gt;

&lt;p&gt;因为我水平有限，有的概念可能不是很全面，甚至可能有偏差，还请多多指点。&lt;/p&gt;

&lt;h2 id=&#34;生命周期是完全静态的&#34;&gt;生命周期是完全静态的&lt;/h2&gt;

&lt;p&gt;Rust 的看家本领就是静态检测，所有实例的生命周期都是在编译时就被确定好的。&lt;/p&gt;

&lt;p&gt;所以不要问：“为什么生命周期不能根据实际情况自动确定？”因为真的做不到！&lt;/p&gt;

&lt;h2 id=&#34;let-可以绑定所有权&#34;&gt;&lt;code&gt;let&lt;/code&gt; 可以绑定所有权&lt;/h2&gt;

&lt;p&gt;除了绑定所有者和数据外，&lt;code&gt;let&lt;/code&gt; 还可以绑定所有者和数据之间的所有权。绑定了所有权，也就绑定了生命周期。&lt;/p&gt;

&lt;p&gt;这是理所当然的事实，但是经常被人忽略。&lt;/p&gt;

&lt;h2 id=&#34;形参与实参的生命周期是相互绑定的&#34;&gt;形参与实参的生命周期是相互绑定的&lt;/h2&gt;

&lt;p&gt;与 &lt;code&gt;let&lt;/code&gt; 相似，函数中的形式参数与实际参数的生命周期是相互绑定的。同样的，函数返回值和函数实体的拥有者的生命周期也是相互绑定的，因为返回值的生命周期与函数实体相互绑定，而函数实体与拥有者相互绑定。&lt;/p&gt;

&lt;p&gt;举个例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn sum(x: u32, y: u32) -&amp;gt; u32 {
      x + y
 }

 fn main(){
     let a = 1;
     let b = 2;
     let c = sum(a, b);
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;x&lt;/code&gt; 与&lt;code&gt;a&lt;/code&gt; 相互绑定，&lt;code&gt;c&lt;/code&gt; 与 &lt;code&gt;sum()&lt;/code&gt; 与 &lt;code&gt;a + b&lt;/code&gt; 相互绑定。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;a -&amp;gt; x
x + y -&amp;gt; sum() -&amp;gt; c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结构体中也是类似的：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;struct Foo {
    x: i32,
}

fn main() {
    let y = 5; 
    let f = Foo { x: y };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;x&lt;/code&gt; 与 &lt;code&gt;y&lt;/code&gt; 相互绑定，结构体 &lt;code&gt;Foo&lt;/code&gt; 与 &lt;code&gt;f&lt;/code&gt; 相互绑定。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;x -&amp;gt; a
Foo -&amp;gt; f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这同样也是理所当然但容易被人忽视的事实，这里提出来也是为了给下一条做铺垫。&lt;/p&gt;

&lt;h2 id=&#34;生命周期标记的影响不仅仅是函数-结构体-内部&#34;&gt;生命周期标记的影响不仅仅是函数 (结构体) 内部&lt;/h2&gt;

&lt;p&gt;准确的说应该是生命周期标记可以通过影响函数 (结构体) 内部来对函数实体的拥有者和传入的实际参数产生影响。具体原因就是上面提到的形式参数与实际参数的生命周期相互绑定，函数返回值和函数实体的拥有者的生命周期相互绑定。&lt;/p&gt;

&lt;p&gt;举个例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn foo&amp;lt;&#39;a&amp;gt;(x: &amp;amp;&#39;a str, y: &amp;amp;str) -&amp;gt; Vec&amp;lt;&amp;amp;&#39;a str&amp;gt; {
    let mut results = Vec::new();

    if x.contains(y) {
        results.push(x);
    }

    results
}

fn main() {
    let a = &amp;quot;I&#39;m foo&amp;quot;;
    let b = &amp;quot;foo&amp;quot;;
    let c = foo(a, b);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;生命周期参数将 &lt;code&gt;x&lt;/code&gt; 的生命周期与 &lt;code&gt;results&lt;/code&gt; 相互绑定，而 &lt;code&gt;x&lt;/code&gt; 与 &lt;code&gt;a&lt;/code&gt; 相互绑定，&lt;code&gt;results&lt;/code&gt; 与 &lt;code&gt;c&lt;/code&gt; 相互绑定，所以 &lt;code&gt;c&lt;/code&gt; 的生命周期与 &lt;code&gt;a&lt;/code&gt; 是相互绑定的！！&lt;span class=&#34;spoiler&#34; &gt;就像三国杀中的“铁索连环”一样&lt;/span&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;a -&amp;gt; [x =&amp;gt; results -&amp;gt; foo] -&amp;gt; c 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;根据关系我们可以很容易发现，&lt;code&gt;a&lt;/code&gt; 必须活得比 &lt;code&gt;c&lt;/code&gt; 长，不然就会报错。&lt;/p&gt;

&lt;p&gt;从整体来考虑生命周期，显然更容易理解什么时候应该使用生命周期标注，什么时候不应该使用。&lt;/p&gt;

&lt;h2 id=&#34;生命周期标注的作用不是-续命&#34;&gt;生命周期标注的作用不是“续命”&lt;/h2&gt;

&lt;p&gt;生命周期标注只是注释出：“谁应该比谁活得更长 (或者相等)”，如果实际情况与标注不相符，编译器会报错。&lt;/p&gt;

&lt;h2 id=&#34;长生命周期是短生命周期的子类型&#34;&gt;长生命周期是短生命周期的子类型&lt;/h2&gt;

&lt;p&gt;与直觉有所不同。显式生命周期标注是泛型参数一种，但是有&lt;strong&gt;协变&lt;/strong&gt;的概念。&lt;/p&gt;

&lt;h2 id=&#34;相关文章&#34;&gt;相关文章&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mogeko.github.io/2019/042/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Rust 中的所有权&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mogeko.github.io/2019/050/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Rust 中的生命周期&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rust 中的生命周期</title>
      <link>https://mogeko.me/2019/050/</link>
      <pubDate>Mon, 01 Apr 2019 19:27:29 +0800</pubDate>
      
      <guid>https://mogeko.me/2019/050/</guid>
      <description>

&lt;!-- 
&lt;img alt=&#34;&#34; src=&#34;https://mogeko.github.io/images/050/&#34; &gt;
&lt;span class=&#34;spoiler&#34; &gt;&lt;/span&gt;
&amp;emsp;&amp;emsp;
 --&gt;

&lt;p&gt;我们在讨论 Rust 的所有权时提到了一个非常重要的概念：&lt;strong&gt;生命周期&lt;/strong&gt; (&lt;em&gt;lifetime&lt;/em&gt;)，也就是引用保持有效的作用域。&lt;/p&gt;

&lt;p&gt;这个概念与所有权结合的相当紧密，同时又与借用和引用关系很大，是属于又难啃又不得不啃的硬骨头。不过在理解后就会真真切切的体会到 Rust 中所有权、生命周期系统等一系列设计的精密。&lt;/p&gt;

&lt;p&gt;在真正开始前，我们需要先了解一下 Rust 中的引用和借用。&lt;/p&gt;

&lt;h2 id=&#34;引用和借用&#34;&gt;引用和借用&lt;/h2&gt;

&lt;p&gt;引用和借用并不是 Rust 所发明的新概念。它在别的语言中也有：在 Java 中它也被称为引用 (有一点区别)、在 C++ 中它被称为&lt;strong&gt;指针&lt;/strong&gt;，不过 Rust 的引用更安全。&lt;/p&gt;

&lt;p&gt;我们先来看一个例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn main() {
    let s1 = String::from(&amp;quot;hello&amp;quot;);

    let len = calculate_length(&amp;amp;s1);

    println!(&amp;quot;The length of &#39;{}&#39; is {}.&amp;quot;, s1, len);
}

fn calculate_length(s: &amp;amp;String) -&amp;gt; usize {
    s.len()
} // 这里，s 离开了作用域。但因为它并不拥有引用值的所有权，
  // 所以什么也不会发生
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们传递 &lt;code&gt;&amp;amp;s1&lt;/code&gt; 给 &lt;code&gt;calculate_length&lt;/code&gt;，同时在函数定义中，我们获取 &lt;code&gt;&amp;amp;String&lt;/code&gt; 而不是 &lt;code&gt;String&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;这些 &amp;amp; 符号就是 &lt;strong&gt;引用&lt;/strong&gt;，它们允许你使用值但不获取其所有权。&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;References&#34; src=&#34;https://mogeko.github.io/images/050/trpl04-05.svg&#34; &gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;与使用 &lt;code&gt;&amp;amp;&lt;/code&gt; 引用相反的操作是 &lt;strong&gt;解引用&lt;/strong&gt; (&lt;em&gt;dereferencing&lt;/em&gt;)，它使用解引用运算符，&lt;code&gt;*&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们将获取引用作为函数参数称为 &lt;strong&gt;借用&lt;/strong&gt; (&lt;em&gt;borrowing&lt;/em&gt;)。正如现实生活中，如果一个人拥有某样东西，你可以从他那里借来。当你使用完毕，必须还回去。&lt;/p&gt;

&lt;h3 id=&#34;悬垂引用-dangling-references&#34;&gt;悬垂引用 (Dangling References)&lt;/h3&gt;

&lt;p&gt;在具有指针的语言中，很容易通过释放内存时保留指向它的指针而错误地生成一个 &lt;strong&gt;悬垂指针&lt;/strong&gt; (&lt;em&gt;dangling pointer&lt;/em&gt;)，所谓悬垂指针是其指向的内存可能已经被分配给其它持有者。相比之下，在 Rust 中编译器确保引用永远也不会变成悬垂状态：当你拥有一些数据的引用，编译器确保数据不会在其引用之前离开作用域。&lt;/p&gt;

&lt;p&gt;让我们尝试创建一个悬垂引用：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn main() {
    let r;
    {
        let a = 1;
        r = &amp;amp;a;
    }
    println!(&amp;quot;{}&amp;quot;, r);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是无法通过编译的：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;error[E0597]: `a` does not live long enough                                     
 --&amp;gt; src/main.rs:5:9                                                            
  |                                                                             
5 |         r = &amp;amp;a;                                                             
  |         ^^^^^^ borrowed value does not live long enough                     
6 |     }                                                                       
  |     - `a` dropped here while still borrowed                                 
7 |     println!(&amp;quot;{}&amp;quot;, r);                                                      
  |                    - borrow later used here
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面代码中，当 &lt;code&gt;a&lt;/code&gt; 离开作用域的时候会被释放，但此时 &lt;code&gt;r&lt;/code&gt; 还持有一个 &lt;code&gt;a&lt;/code&gt; 的借用，编译器中的借用检查器就会告诉你：&lt;code&gt;`a` does not live long enough&lt;/code&gt;。翻译过来就是：&lt;code&gt;a&lt;/code&gt; 活的不够久。这代表着 &lt;code&gt;a&lt;/code&gt; 的生命周期太短，而无法借用给 &lt;code&gt;r&lt;/code&gt; ，否则 &lt;code&gt;&amp;amp;a&lt;/code&gt; 就指向了一个曾经存在但现在已不再存在的对象，这就是悬垂指针，也有人将其称为野指针。&lt;/p&gt;

&lt;h2 id=&#34;生命周期&#34;&gt;生命周期&lt;/h2&gt;

&lt;p&gt;部分时候生命周期是隐含并可以推断的，正如大部分时候类型也是可以推断的一样。类似于当因为有多种可能类型的时候必须注明类型，也会出现引用的生命周期以一些不同方式相关联的情况，所以 Rust 需要我们使用泛型生命周期参数来注明他们的关系，这样就能确保运行时实际使用的引用绝对是有效的。如果你不指定生命周期，那么编译器会“强制”你这么做：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;struct Foo {
    x: &amp;amp;i32,
}

fn main() {
    let y = &amp;amp;5; 
    let f = Foo { x: y };

    println!(&amp;quot;{}&amp;quot;, f.x);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;error[E0106]: missing lifetime specifier                                        
 --&amp;gt; src/main.rs:2:8                                                            
  |                                                                             
2 |     x: &amp;amp;i32,                                                                
  |        ^ expected lifetime parameter                                        
                                                                                
error: aborting due to previous error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面这段代码，编译器会提示你：&lt;code&gt;missing lifetime specifier&lt;/code&gt;。这是因为，&lt;code&gt;y&lt;/code&gt; 这个借用被传递到了 &lt;code&gt;let f = Foo { x: y }&lt;/code&gt; 所在作用域中。所以需要确保借用 &lt;code&gt;y&lt;/code&gt; 活得比 &lt;code&gt;Foo&lt;/code&gt; 结构体实例长才行，否则，如果借用 &lt;code&gt;y&lt;/code&gt; 被提前释放，&lt;code&gt;Foo&lt;/code&gt; 结构体实例就会造成悬垂指针了。所以我们需要为其增加生命周期标记：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;struct Foo&amp;lt;&#39;a&amp;gt; {
    x: &amp;amp;&#39;a i32,
}

fn main() {
    let y = &amp;amp;5; 
    let f = Foo { x: y };

    println!(&amp;quot;{}&amp;quot;, f.x);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;加上生命周期标记以后，编译器中的借用检查器就会帮助我们自动比对参数变量的作用域长度，从而确保内存安全。&lt;/p&gt;

&lt;p&gt;再比如这个例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn longest&amp;lt;&#39;a&amp;gt;(x: &amp;amp;&#39;a str, y: &amp;amp;&#39;a str) -&amp;gt; &amp;amp;&#39;a str {
    if x.len() &amp;gt; y.len() {
        x
    } else {
        y
    }
}

fn main() {
    let string1 = String::from(&amp;quot;abcd&amp;quot;);
    let string2 = &amp;quot;xyz&amp;quot;;

    let result = longest(string1.as_str(), string2);
    println!(&amp;quot;The longest string is {}&amp;quot;, result);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因为 &lt;code&gt;longest&lt;/code&gt; 的实例返回的是一个指针， 并且这个指针与 &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 都有关系。所以必须确保&lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 活得比 &lt;code&gt;result&lt;/code&gt; 长 (或者一样长)，这便是显式生命周期注释的作用。&lt;/p&gt;

&lt;h2 id=&#34;相关文章&#34;&gt;相关文章&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mogeko.github.io/2019/042/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Rust 中的所有权&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mogeko.github.io/2019/051/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Rust 生命周期中的一些坑&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用 Travis CI 自动维护软件仓库 (Homebrew)</title>
      <link>https://mogeko.me/2019/049/</link>
      <pubDate>Fri, 29 Mar 2019 12:48:08 +0800</pubDate>
      
      <guid>https://mogeko.me/2019/049/</guid>
      <description>

&lt;!-- 
&lt;img alt=&#34;&#34; src=&#34;https://mogeko.github.io/images/049/&#34; &gt;
&lt;span class=&#34;spoiler&#34; &gt;&lt;/span&gt;
&amp;emsp;&amp;emsp;
 --&gt;

&lt;p&gt;前段时间的一篇文章介绍了&lt;a href=&#34;https://mogeko.me/2019/046/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;如何使用 Homebrew 建立自己的软件仓库&lt;/a&gt;，目的是让大家能轻松的发布软件。但同时如何让仓库里的软件保持最新又成为了新的问题。&lt;/p&gt;

&lt;p&gt;我一直没有找到合适的答案，直到看到了这个 &lt;a href=&#34;https://github.com/v2ray/homebrew-v2ray/issues/1&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Issues&lt;/a&gt;。受此启发，我编写了一个利用 Travis CI 自动更新 Formula 的 shell 脚本。它的基本原理就是利用 Travis CI 的 &lt;code&gt;Cron Jobs&lt;/code&gt; 功能，每天定期运行更新脚本，如果有更新，就根据修改 Formula 脚本，并推送到 Tap (GitHub) 仓库。&lt;/p&gt;

&lt;p&gt;不同的仓库需要修改脚本以适配不同的项目，但我会在后文中详细介绍脚本是如何工作的，保证你读完后也能编写出自动维护 Formula 的脚本。&lt;/p&gt;

&lt;p&gt;完整的更新脚本参考和 &lt;code&gt;.travis.yml&lt;/code&gt; 在&lt;a href=&#34;https://mogeko.me/2019/049/#%E9%99%84%E5%BD%95&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;附录&lt;/a&gt;里。&lt;/p&gt;

&lt;h2 id=&#34;手动更新&#34;&gt;手动更新&lt;/h2&gt;

&lt;p&gt;首先我们要了解一下如何手动更新 Formula。还是以 &lt;a href=&#34;https://github.com/fatedier/frp&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;frp&lt;/strong&gt;&lt;/a&gt; 为例。&lt;/p&gt;

&lt;p&gt;假如 &lt;strong&gt;frp&lt;/strong&gt; 发布了新的更新，我们首先要去 &lt;strong&gt;frp&lt;/strong&gt; 的 GitHub Releases 页面获取最新版本的源码。&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;Get_Source&#34; src=&#34;https://mogeko.github.io/images/049/get_source.png&#34; &gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ wget https://github.com/fatedier/frp/archive/v0.25.3.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后利用 &lt;code&gt;sha256sum&lt;/code&gt; 计算源码的 sha256 校验值。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sha256sum v0.25.3.tar.gz
68281965d04567d55f143b4a4c4d4369c1962937d80484b6b48e96a5dcf0b2e4  v0.25.3.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再将计算好的校验码和下载链接替换到 &lt;code&gt;frp.rb&lt;/code&gt; 中。&lt;/p&gt;

&lt;p&gt;总结一下就是：&lt;strong&gt;下载最新的源码 -&amp;gt; 计算校验码 -&amp;gt; 替换下载地址和校验码&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;而我们要做的就是用脚本来执行上面这一过程，让计算机来做重复又无味的工作。&lt;/p&gt;

&lt;h2 id=&#34;自动更新&#34;&gt;自动更新&lt;/h2&gt;

&lt;p&gt;在 Tap 的根目录新建一文件，命名为 &lt;code&gt;auto-update.sh&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;定义变量-常量&#34;&gt;定义变量 (常量)&lt;/h3&gt;

&lt;p&gt;首先我们定义一些变量 (常量) 来储存必要的信息。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;typeset -l FILE_NAME # 将 $FILE_NAME 设为全部小写

AUTHUR_NAME=&amp;quot;fatedier&amp;quot; # 软件拥有者的 GitHub 用户名
FORMULA_NAME=&amp;quot;frp&amp;quot; # 软件仓库名
FILE_NAME=$FORMULA_NAME # Formula 的文件名 (等于全小写的 $FORMULA_NAME)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为什么要将 &lt;code&gt;$FORMULA_NAME&lt;/code&gt; 和 &lt;code&gt;$FILE_NAME&lt;/code&gt; 分开呢？因为软件仓库是允许大写的，但 Formula 的文件名不允许&lt;/p&gt;

&lt;h3 id=&#34;克隆-git-仓库&#34;&gt;克隆 Git 仓库&lt;/h3&gt;

&lt;p&gt;虽然我们有一个存放 Formula 的 Git 仓库了，但总觉得在一个镜像仓库中操作文件更放心一点&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://${GH_REF}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;获取最新的版本号&#34;&gt;获取最新的版本号&lt;/h3&gt;

&lt;p&gt;我们需要获取最新版本的版本号，可以通过 &lt;a href=&#34;https://developer.github.com/v3/repos/releases&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;GitHub API&lt;/a&gt; 来获取，我们先在终端中试验一下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -s https://api.github.com/repos/fatedier/frp/releases/latest
{
  &amp;quot;url&amp;quot;: &amp;quot;https://api.github.com/repos/fatedier/frp/releases/16350972&amp;quot;,
  &amp;quot;assets_url&amp;quot;: &amp;quot;https://api.github.com/repos/fatedier/frp/releases/16350972/assets&amp;quot;,
  &amp;quot;upload_url&amp;quot;: &amp;quot;https://uploads.github.com/repos/fatedier/frp/releases/16350972/assets{?name,label}&amp;quot;,
  &amp;quot;html_url&amp;quot;: &amp;quot;https://github.com/fatedier/frp/releases/tag/v0.25.3&amp;quot;,
  &amp;quot;id&amp;quot;: 16350972,
  &amp;quot;node_id&amp;quot;: &amp;quot;MDc6UmVsZWFzZTE2MzUwOTcy&amp;quot;,
  &amp;quot;tag_name&amp;quot;: &amp;quot;v0.25.3&amp;quot;,
  &amp;quot;target_commitish&amp;quot;: &amp;quot;master&amp;quot;,
  &amp;quot;name&amp;quot;: &amp;quot;v0.25.3&amp;quot;,
  &amp;quot;draft&amp;quot;: false,
  &amp;quot;author&amp;quot;: {
    &amp;quot;login&amp;quot;: &amp;quot;fatedier&amp;quot;,
    &amp;quot;id&amp;quot;: 7346661,
    &amp;quot;node_id&amp;quot;: &amp;quot;MDQ6VXNlcjczNDY2NjE=&amp;quot;,
    &amp;quot;avatar_url&amp;quot;: &amp;quot;https://avatars3.githubusercontent.com/u/7346661?v=4&amp;quot;,
    &amp;quot;gravatar_id&amp;quot;: &amp;quot;&amp;quot;,
    &amp;quot;url&amp;quot;: &amp;quot;https://api.github.com/users/fatedier&amp;quot;,
    &amp;quot;html_url&amp;quot;: &amp;quot;https://github.com/fatedier&amp;quot;,
    &amp;quot;followers_url&amp;quot;: &amp;quot;https://api.github.com/users/fatedier/followers&amp;quot;,
    &amp;quot;following_url&amp;quot;: &amp;quot;https://api.github.com/users/fatedier/following{/other_user}&amp;quot;,
    &amp;quot;gists_url&amp;quot;: &amp;quot;https://api.github.com/users/fatedier/gists{/gist_id}&amp;quot;,
    &amp;quot;starred_url&amp;quot;: &amp;quot;https://api.github.com/users/fatedier/starred{/owner}{/repo}&amp;quot;,
    &amp;quot;subscriptions_url&amp;quot;: &amp;quot;https://api.github.com/users/fatedier/subscriptions&amp;quot;,
    &amp;quot;organizations_url&amp;quot;: &amp;quot;https://api.github.com/users/fatedier/orgs&amp;quot;,
    &amp;quot;repos_url&amp;quot;: &amp;quot;https://api.github.com/users/fatedier/repos&amp;quot;,
    &amp;quot;events_url&amp;quot;: &amp;quot;https://api.github.com/users/fatedier/events{/privacy}&amp;quot;,
    &amp;quot;received_events_url&amp;quot;: &amp;quot;https://api.github.com/users/fatedier/received_events&amp;quot;,
    &amp;quot;type&amp;quot;: &amp;quot;User&amp;quot;,
    &amp;quot;site_admin&amp;quot;: false
  },
  ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;返回的结果中就包含了我们需要的版本号。我在用 &lt;code&gt;grep&lt;/code&gt; 过滤一下，让大家看清楚一点&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -s https://api.github.com/repos/fatedier/frp/releases/latest
  &amp;quot;tag_name&amp;quot;: &amp;quot;v0.25.3&amp;quot;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后用 &lt;code&gt;cut&lt;/code&gt; 处理一下字符串，并加上一个 &lt;code&gt;loop&lt;/code&gt; 循环 (排除网络环境的影响) 就可以用了。反映到脚本上是这样的&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;loop_parser(){
    while true
    do
       result=$(curl -s https://api.github.com/repos/&amp;quot;$AUTHUR_NAME&amp;quot;/&amp;quot;$FORMULA_NAME&amp;quot;/releases/latest | grep &amp;quot;$1&amp;quot; | cut -d &#39;&amp;quot;&#39; -f 4)
       if [ ! -z &amp;quot;$result&amp;quot; ]; then
        echo $result
        break
       fi
    done
}

V_VERSION=$( loop_parser &amp;quot;tag_name&amp;quot; )
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;下载源文件&#34;&gt;下载源文件&lt;/h3&gt;

&lt;p&gt;然后我们将&lt;code&gt;$V_VERSION&lt;/code&gt; (版本号) 与 &lt;code&gt;$AUTHUR_NAME&lt;/code&gt;、&lt;code&gt;$FORMULA_NAME&lt;/code&gt; 等信息组合一下就可以获得源文件的下载链接&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;DOWNLOAD_URL=&amp;quot;https://github.com/$AUTHUR_NAME/$FORMULA_NAME/archive/&amp;quot;$V_VERSION&amp;quot;.tar.gz&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用 &lt;code&gt;curl&lt;/code&gt; 下载源文件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -L  $DOWNLOAD_URL &amp;gt; $FORMULA_NAME.$V_VERSION.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;计算校验码&#34;&gt;计算校验码&lt;/h3&gt;

&lt;p&gt;然后就可以计算  sha256 校验码了，还是用 &lt;code&gt;sha256sum&lt;/code&gt; 计算，用 &lt;code&gt;cut&lt;/code&gt; 处理字符串&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;V_HASH256=$(sha256sum $FORMULA_NAME.$V_VERSION.tar.gz |cut  -d &#39; &#39; -f 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;替换下载链接和校验码&#34;&gt;替换下载链接和校验码&lt;/h3&gt;

&lt;p&gt;用 &lt;code&gt;sed&lt;/code&gt; 替换 Formula 中需要更新的信息，如果不需要更新，那么替换后还是原来的 Formula。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 如果 Formula 中有 version 这一变量的话取消下面的注释
# sed -i &amp;quot;s#^\s*version.*#  version \&amp;quot;$V_VERSION\&amp;quot;#g&amp;quot; homebrew-taps/Formula/$FILE_NAME.rb
sed -i &amp;quot;s#^\s*url.*#  version \&amp;quot;$DOWNLOAD_URL\&amp;quot;#g&amp;quot; homebrew-taps/Formula/$FILE_NAME.rb
sed -i &amp;quot;s#^\s*sha256.*#  sha256 \&amp;quot;$V_HASH256\&amp;quot;#g&amp;quot; homebrew-taps/Formula/$FILE_NAME.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;推送&#34;&gt;推送&lt;/h3&gt;

&lt;p&gt;将更新好的 Formula 文件推送到 GitHub 上 (&lt;code&gt;${GH_TOKEN}&lt;/code&gt; 和 &lt;code&gt;${GH_REF}&lt;/code&gt; 这两个变量需要在 Travis CI 中添加)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git commit -am &amp;quot;travis automated update&amp;quot; || exit 0
git push  --quiet &amp;quot;https://${GH_TOKEN}@${GH_REF}&amp;quot; master:master
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;配置-travis-ci&#34;&gt;配置 Travis CI&lt;/h2&gt;

&lt;h3 id=&#34;travis-yml&#34;&gt;.travis.yml&lt;/h3&gt;

&lt;p&gt;这次的 &lt;code&gt;.travis.yml&lt;/code&gt; 很简单，只需要做两件事：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;设置 &lt;code&gt;git config&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;执行放在根目录的 &lt;code&gt;auto-update.sh&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-.travis.yml&#34;&gt;before_install:
  - git config --global user.name &amp;quot;$USERNAME&amp;quot; 
  - git config --global user.email &amp;quot;$EMAIL&amp;quot;

script:
  - auto-update.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;完整的 &lt;code&gt;.travis.yml&lt;/code&gt; 文件在&lt;a href=&#34;https://mogeko.me/2019/049/#%E9%99%84%E5%BD%95&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;附录&lt;/a&gt;里。&lt;/p&gt;

&lt;h3 id=&#34;设置环境变量&#34;&gt;设置环境变量&lt;/h3&gt;

&lt;p&gt;需要设置以下环境变量&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$USERNAME&lt;/code&gt;：你想记录在 git log 中的名字&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;$EMAIL&lt;/code&gt;：你的邮箱&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;${GH_TOKEN}&lt;/code&gt;：GitHub TOKEN，点满 &lt;code&gt;repo&lt;/code&gt; 的所有权限&amp;emsp;&lt;a href=&#34;https://mogeko.me/2018/028/#%E7%94%B3%E8%AF%B7-token&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;GitHub TOKEN 申请方法&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;${GH_REF}&lt;/code&gt;：你存放 Formula 的 GitHub 仓库的地址，例如：&lt;code&gt;github.com/:owner/:repo&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt=&#34;Set ENV&#34; src=&#34;https://mogeko.github.io/images/049/set_env.png&#34; &gt;&lt;/p&gt;

&lt;h3 id=&#34;设置-cron-jobs&#34;&gt;设置 Cron Jobs&lt;/h3&gt;

&lt;p&gt;设置 Cron Jobs，让 Travis CI 定期运行脚本&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;Set Cron Jobs&#34; src=&#34;https://mogeko.github.io/images/049/set_cron.png&#34; &gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Branch:&lt;/strong&gt; master&amp;emsp;&amp;emsp;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interval:&lt;/strong&gt; daily&amp;emsp;&amp;emsp;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Options:&lt;/strong&gt; Always run&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;附录&#34;&gt;附录&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;.travis.yml&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-.travis.yml&#34;&gt;language: generic

sudo: required

before_install:
  - git config --global user.name &amp;quot;$USERNAME&amp;quot; 
  - git config --global user.email &amp;quot;$EMAIL&amp;quot;

before_script:
  - chmod +x tools/auto-update.sh

script:
  - tools/auto-update.sh

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;auto-update.sh&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

typeset -l FILE_NAME # 将 $FILE_NAME 设为全部小写

AUTHUR_NAME=&amp;quot;&amp;quot; # 软件拥有者的 GitHub 用户名
FORMULA_NAME=&amp;quot;&amp;quot; # 软件仓库名
FILE_NAME=$FORMULA_NAME # Formula 的文件名 (等于全小写的 $FORMULA_NAME)

log(){
    echo &#39;&#39;
    echo &#39;-------------------------------------&#39;
    echo &amp;quot;$*&amp;quot;
    echo &#39;-------------------------------------&#39;
    echo &#39;&#39;
}

loop_parser(){
    while true
    do
       result=$(curl -s https://api.github.com/repos/&amp;quot;$AUTHUR_NAME&amp;quot;/&amp;quot;$FORMULA_NAME&amp;quot;/releases/latest | grep &amp;quot;$1&amp;quot; | cut -d &#39;&amp;quot;&#39; -f 4)
       if [ ! -z &amp;quot;$result&amp;quot; ]; then
        echo $result
        break
       fi
    done
}

git clone https://github.com/Mogeko/homebrew-taps.git

log &amp;quot;parser $FORMULA_NAME download url&amp;quot;

V_VERSION=$( loop_parser &amp;quot;tag_name&amp;quot; )

if [ -z &amp;quot;$V_VERSION&amp;quot; ]; then

    log &#39;parser file version error, skip update.&#39;
    exit 0

fi

DOWNLOAD_URL=&amp;quot;https://github.com/$AUTHUR_NAME/$FORMULA_NAME/archive/&amp;quot;$V_VERSION&amp;quot;.tar.gz&amp;quot;

if [ -z &amp;quot;$DOWNLOAD_URL&amp;quot; ]; then

    log &#39;parser download url error.&#39;
    exit 0

fi

log &amp;quot;download url: $DOWNLOAD_URL  start downloading...&amp;quot;

# wget -c $DOWNLOAD_URL -O $FORMULA_NAME.$V_VERSION.tar.gz
curl -L  $DOWNLOAD_URL &amp;gt; $FORMULA_NAME.$V_VERSION.tar.gz


if [ ! -e $FORMULA_NAME.$V_VERSION.tar.gz ]; then
    log &amp;quot;file download failed!&amp;quot;
    exit 1
fi

V_HASH256=$(sha256sum $FORMULA_NAME.$V_VERSION.tar.gz |cut  -d &#39; &#39; -f 1)

log &amp;quot;file hash: $V_HASH256 parser $FORMULA_NAME version...&amp;quot;

log &amp;quot;file version: $V_VERSION start clone...&amp;quot;

log &amp;quot;update config....&amp;quot;

sed -i &amp;quot;s#^\s*version.*#  version \&amp;quot;$V_VERSION\&amp;quot;#g&amp;quot; homebrew-taps/Formula/$FILE_NAME.rb
sed -i &amp;quot;s#^\s*sha256.*#  sha256 \&amp;quot;$V_HASH256\&amp;quot;#g&amp;quot; homebrew-taps/Formula/$FILE_NAME.rb

git commit -am &amp;quot;travis automated update&amp;quot; || exit 0
git push  --quiet &amp;quot;https://${GITHUB_TOKEN}@${GH_REF}&amp;quot; master:master

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;相关文章&#34;&gt;相关文章&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mogeko.me/2019/046/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;使用 Homebrew 维护自己的软件仓库&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>为博客添加独立域名</title>
      <link>https://mogeko.me/2019/048/</link>
      <pubDate>Thu, 28 Mar 2019 14:39:37 +0800</pubDate>
      
      <guid>https://mogeko.me/2019/048/</guid>
      <description>

&lt;!-- 
&lt;img alt=&#34;&#34; src=&#34;https://mogeko.github.io/images/048/&#34; &gt;
&lt;span class=&#34;spoiler&#34; &gt;&lt;/span&gt;
&amp;emsp;&amp;emsp;
 --&gt;

&lt;p&gt;关于如何给部署在 GitHub Pages 上的博客添加独立域名，上网有很多教程。但是他们要么方法已经过时了，要么就没有说清楚原理，弄得我走了很多弯路。&lt;/p&gt;

&lt;p&gt;今天我就来写一篇面向小白的教程，尽我所能讲清楚怎么做？为什么？&lt;/p&gt;

&lt;h2 id=&#34;选购域名&#34;&gt;选购域名&lt;/h2&gt;

&lt;p&gt;可能很多人已经买好了域名了，你可以&lt;a href=&#34;#GitHub 上的设置&#34;&gt;跳过这部分&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;要想给博客绑定独立域名，首先你得拥有一个域名。首先你得去域名注册网站购买域名，如果想在国内的域名商手里购买的话我比较推荐&lt;a href=&#34;https://wanwang.aliyun.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;万网&lt;/a&gt;，国外的话比较推荐 &lt;a href=&#34;https://www.godaddy.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;GoDaddy&lt;/a&gt;，因为他们分别是中国最大和世界最大的域名注册服务商。&lt;strong&gt;千万不要为了贪便宜，去那些不正规的小域名商那里注册，水很深的。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我的与域名是在 GoDaddy 买的，因为国内买不到 &lt;code&gt;.me&lt;/code&gt; 的域名，而我又恰恰有点喜欢这个域名 (简短好记，还是一个英文单词，最关键的是这个单词还特别适合博客！！)。价格的话只要不是 &lt;code&gt;.com&lt;/code&gt; 这样“高级货”，一般的域名都是 120 左右一年，平均下来每个月 10 块钱左右 (就当充个会员了)，另外第一年一般都有很高的折扣，比如我这个 &lt;code&gt;.me&lt;/code&gt; 的域名第一年就只要了我 24 (不过 WHOIS 目录中的个人信息加密需要另外收费)&lt;/p&gt;

&lt;p&gt;具体选购过程大致就是：&lt;strong&gt;搜索域名 -&amp;gt; 将喜欢的域名加入购物车 -&amp;gt; 付款 -&amp;gt; 购买成功&lt;/strong&gt;，跟去某宝买东西差不多，这里就不再赘述了。&lt;/p&gt;

&lt;h2 id=&#34;github-上的设置&#34;&gt;GitHub 上的设置&lt;/h2&gt;

&lt;p&gt;购买好域名后，首先到 Github 上，你部署博客的那个 Git 仓库的设置里，在 &lt;code&gt;Custom domain&lt;/code&gt; 这里填上你购买的域名&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;Settings on GitHub&#34; src=&#34;https://mogeko.github.io/images/048/gh_setting_CNAME.png&#34; &gt;&lt;/p&gt;

&lt;p&gt;或者在创建一个名为 &lt;code&gt;CNAME&lt;/code&gt; 的文件放在根目录，其中的内容&lt;strong&gt;只&lt;/strong&gt;写上你的域名，像这样&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CNAME&#34;&gt;example.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果使用了 Travis CI 这类持续集成服务来部署博客的话推荐使用第二种方式进行设置。&lt;/p&gt;

&lt;p&gt;如果 &lt;code&gt;Custom domain&lt;/code&gt; 下方有 &lt;code&gt;Enforce HTTPS&lt;/code&gt; 这个选项的话一并勾选上&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;Settings on GitHub&#34; src=&#34;https://mogeko.github.io/images/048/gh_setting_HTTPS.png&#34; &gt;&lt;/p&gt;

&lt;p&gt;Github 跟 Let&amp;rsquo;s Encrypt 有合作，如果勾选了这个选项，Let&amp;rsquo;s Encrypt 就会给你的博客签发一张 SSL 证书，免费的。&lt;/p&gt;

&lt;h2 id=&#34;dns-上的设置&#34;&gt;DNS 上的设置&lt;/h2&gt;

&lt;p&gt;终于到了最关键的一步了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;现在要做的是让域名指向正确的 IP 地址，GitHub 为此提供了四条 IP，使用 &lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F#%E8%AE%B0%E5%BD%95%E7%B1%BB%E5%9E%8B&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;A 记录&lt;/a&gt; 指向这四条 IP 地址就可以了&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这四条 IP 分别是 (来自&lt;a href=&#34;https://help.github.com/en/articles/setting-up-an-apex-domain&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt; GitHub 的官方文档&lt;/a&gt;)：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;185.199.108.153&amp;emsp;&amp;emsp;185.199.109.153&amp;emsp;&amp;emsp;185.199.110.153&amp;emsp;&amp;emsp;185.199.111.153&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;你需要到你购买域名的域名商的域名管理页面进行设置，虽然不同的域名商域名管理页面不同，不过原理都是相同的。&lt;/p&gt;

&lt;p&gt;这里以 GoDaddy 为例，进入&lt;strong&gt;域名管理器 (Domain Manager) -&amp;gt; DNS 管理 (Manage DNS)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;Setting on DNS&#34; src=&#34;https://mogeko.github.io/images/048/DNS_setting_1.png&#34; &gt;&lt;/p&gt;

&lt;p&gt;在&lt;strong&gt;记录 (Record)&lt;/strong&gt; 项目中点击 &lt;strong&gt;添加 (ADD)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;Setting on DNS&#34; src=&#34;https://mogeko.github.io/images/048/DNS_setting_2.png&#34; &gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;类型 (Type)：A&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;主机 (Host)：@&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;指向 (Points to)：185.199.108.153&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;TTL：保持默认&lt;/strong&gt;&lt;span style=&#34;color: #6a737d;font-style:italic;font-size: 0.9em;float: right;margin-top: 15px;&#34;&gt;@ 表示顶级域名，也就是你注册的域名本身&lt;/span&gt;
&lt;br&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以相同的方式配置剩下的三条 IP 地址&lt;/p&gt;

&lt;blockquote&gt;
    &lt;p&gt;
        &lt;strong&gt;类型 (Type)：A&lt;/strong&gt;&lt;br&gt;
        &lt;strong&gt;主机 (Host)：@&lt;/strong&gt;&lt;br&gt;
        &lt;strong&gt;指向 (Points to)：185.199.109.153&lt;/strong&gt;&lt;br&gt;
        &lt;strong&gt;TTL：保持默认&lt;/strong&gt;&lt;br&gt;
    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
    &lt;p&gt;
        &lt;strong&gt;类型 (Type)：A&lt;/strong&gt;&lt;br&gt;
        &lt;strong&gt;主机 (Host)：@&lt;/strong&gt;&lt;br&gt;
        &lt;strong&gt;指向 (Points to)：185.199.110.153&lt;/strong&gt;&lt;br&gt;
        &lt;strong&gt;TTL：保持默认&lt;/strong&gt;&lt;br&gt;
    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
    &lt;p&gt;
        &lt;strong&gt;类型 (Type)：A&lt;/strong&gt;&lt;br&gt;
        &lt;strong&gt;主机 (Host)：@&lt;/strong&gt;&lt;br&gt;
        &lt;strong&gt;指向 (Points to)：185.199.111.153&lt;/strong&gt;&lt;br&gt;
        &lt;strong&gt;TTL：保持默认&lt;/strong&gt;&lt;br&gt;
    &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;等几分钟 (刷新 DNS 缓存)，然后在浏览器中输入你的域名，回车；不出意外的话你应该可以看到你的博客了。&lt;/p&gt;

&lt;h3 id=&#34;设置二级域名&#34;&gt;设置二级域名&lt;/h3&gt;

&lt;p&gt;除了通过顶级域名进行访问外你还可以设置二级域名，例如 &lt;code&gt;www.mogeko.me&lt;/code&gt; 和 &lt;code&gt;blog.mogeko.me&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;仍然在&lt;strong&gt;记录 (Record)&lt;/strong&gt; 中&lt;strong&gt;添加 (ADD)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;Setting on DNS&#34; src=&#34;https://mogeko.github.io/images/048/DNS_setting_3.png&#34; &gt;&lt;/p&gt;

&lt;p&gt;不过这次添加的类型 (Type) 不是 &lt;strong&gt;A 记录&lt;/strong&gt;而是 &lt;strong&gt;CNAME&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote&gt;
    &lt;p&gt;
        &lt;strong&gt;类型 (Type)：CNAME&lt;/strong&gt;&lt;br&gt;
        &lt;strong&gt;主机 (Host)：www&lt;/strong&gt;&lt;br&gt;
        &lt;strong&gt;指向 (Points to)：@&lt;/strong&gt;&lt;br&gt;
        &lt;strong&gt;TTL：保持默认&lt;/strong&gt;&lt;br&gt;
    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
    &lt;p&gt;
        &lt;strong&gt;类型 (Type)：CNAME&lt;/strong&gt;&lt;br&gt;
        &lt;strong&gt;主机 (Host)：blog&lt;/strong&gt;&lt;br&gt;
        &lt;strong&gt;指向 (Points to)：@&lt;/strong&gt;&lt;br&gt;
        &lt;strong&gt;TTL：保持默认&lt;/strong&gt;&lt;br&gt;
    &lt;/p&gt;
&lt;/blockquote&gt;
此时，你不仅可以通过 &lt;code&gt;example.com&lt;/code&gt; 访问你的博客，还可以通过 &lt;code&gt;www.example.com&lt;/code&gt; 或 &lt;code&gt;blog.example.com&lt;/code&gt; 访问到你的博客。&lt;/p&gt;

&lt;h2 id=&#34;其他玩法&#34;&gt;其他玩法&lt;/h2&gt;

&lt;p&gt;除了将域名绑定给博客外博客，还可以用域名干一些别的事。&lt;/p&gt;

&lt;p&gt;比如，&lt;strong&gt;使用 A 记录将 &lt;code&gt;mail.mogeko.me&lt;/code&gt; 这个二级域名指向 &lt;code&gt;207.46.149.80&lt;/code&gt; 就可以“搭建”一个 &lt;a href=&#34;http://mail.mogeko.me&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;临时邮箱&lt;/a&gt;服务&lt;/strong&gt;
&lt;span style=&#34;float: right;&#34;&gt;(感谢 &lt;a href=&#34;https://moeclub.org&#34;&gt;萌咖 | MoeClub.org&lt;/a&gt; 提供的服务器)&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;如果你还有一台拥有&lt;strong&gt;公网 IP&lt;/strong&gt; 的服务器，可玩性就更高了！&lt;/p&gt;

&lt;p&gt;如果有能力，你甚至可以拥有自己的&lt;a href=&#34;https://nutch.apache.org&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;搜索引擎&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;相关文章&#34;&gt;相关文章&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://localhost:1313/2018/018/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;使用 Hugo + GitHub Pages 搭建个人博客&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://mogeko.me/2017/002/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;使用 Hexo + GitHub Pages 建立自己的博客&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://mogeko.github.io/2018/028/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;使用 Travis CI 自动部署 Hugo 博客&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>本站上线临时邮箱服务了！！</title>
      <link>https://mogeko.me/2019/047/</link>
      <pubDate>Wed, 27 Mar 2019 11:51:10 +0800</pubDate>
      
      <guid>https://mogeko.me/2019/047/</guid>
      <description>

&lt;!-- 
&lt;img alt=&#34;&#34; src=&#34;https://mogeko.github.io/images/047/&#34; &gt;
&lt;span class=&#34;spoiler&#34; &gt;&lt;/span&gt;
&amp;emsp;&amp;emsp;
 --&gt;

&lt;p&gt;&lt;strong&gt;本站的临时邮箱暂时不支持申请免费的 Office 356 教育版的 5T OneDrive 网络硬盘&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;今天！本站的临时邮箱服务上线了！！(￣y▽,￣)╭  地址：&lt;a href=&#34;http://mail.mogeko.me&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;mail.mogeko.me&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;什么是临时邮箱呢？就是一个临时分配的一次性邮箱地址，你只能用它来&lt;strong&gt;收&lt;/strong&gt;邮件，但关闭网页它就没有了。&lt;/p&gt;

&lt;p&gt;所以这又有什么用了？&lt;/p&gt;

&lt;p&gt;大家来试想一下这个场景：你在 XX论坛 看件有大佬的资源分享贴，然后你又正好需要这个这个资源。当你兴奋的点下 &lt;code&gt;下载附件&lt;/code&gt; 按钮是，弹出一个窗口&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;readmail&#34; src=&#34;https://mogeko.github.io/images/047/readmail_0.png&#34; &gt;&lt;/p&gt;

&lt;p&gt;我只是想下个附件啊！（╯‵□′）╯︵┴─┴&lt;/p&gt;

&lt;p&gt;用真实邮箱注册吧，不仅注册麻烦，而且&lt;strong&gt;还有被垃圾邮件轰炸的风险&lt;/strong&gt;。这时，如果有临时邮箱就不同了——&lt;strong&gt;你可以使用临时邮箱申请注册，注册成功后就扔掉不管了&lt;/strong&gt;，你今后仍可使用注册的邮箱登录，&lt;del&gt;不过这种垃圾论坛一般不会经常使用的吧。&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;在成功下到资源的同时避免了身份泄露被垃圾邮件轰炸，深藏功与名๑乛◡乛๑&lt;/p&gt;

&lt;p style=&#34;float: right;&#34;&gt;(感谢 &lt;a href=&#34;https://moeclub.org&#34;&gt;萌咖 | MoeClub.org&lt;/a&gt; 提供的服务器)&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;如何使用&#34;&gt;如何使用&lt;/h2&gt;

&lt;p&gt;首先，打开 &lt;a href=&#34;http://mail.mogeko.me&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;临时邮箱&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;readmail&#34; src=&#34;https://mogeko.github.io/images/047/readmail_1.png&#34; &gt;&lt;/p&gt;

&lt;p&gt;右上角就是分配给你的临时邮箱地址了，如果不满意的话你也可以刷新，或者自定义邮箱地址 (如果可用的话)&lt;/p&gt;

&lt;p&gt;然后，&lt;strong&gt;千万不要关闭临时邮箱的页面&lt;/strong&gt;，直接去需要注册的论坛，填上分配给你的邮箱地址，以及随便取的用户名、密码等。&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;readmail&#34; src=&#34;https://mogeko.github.io/images/047/readmail_2.png&#34; &gt;&lt;/p&gt;

&lt;p&gt;然后就可以收到验证码等注册所需要的信息了&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;readmail&#34; src=&#34;https://mogeko.github.io/images/047/readmail_3.png&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用 Homebrew 维护自己的软件仓库</title>
      <link>https://mogeko.me/2019/046/</link>
      <pubDate>Sat, 23 Mar 2019 17:47:42 +0800</pubDate>
      
      <guid>https://mogeko.me/2019/046/</guid>
      <description>

&lt;!-- 
&lt;img alt=&#34;&#34; src=&#34;https://mogeko.github.io/images/046/&#34; &gt;
&lt;span class=&#34;spoiler&#34; &gt;&lt;/span&gt;
&amp;emsp;&amp;emsp;
 --&gt;

&lt;p&gt;&lt;a href=&#34;nrew.sh&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Homebrew&lt;/a&gt; 是最初是 Max Howell 自己写来管理 MacOS 软件的一个小工具，没想到后来直接火了。不仅成为了 &lt;a href=&#34;https://github.com/Homebrew/brew&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt; 上拥有贡献者最多的一个项目，还是 MacOS 系统中事实上的包管理器。&lt;/p&gt;

&lt;p&gt;所以 Homebrew 到底又什么过人之处，能够得到这么多人的爱戴？其实并没有什么特别的地方，究其原理 Homebrew 并不比 apt / yum 高明，甚至 Homebrew (从源码) 安装软件的方式还可能存在安全性的问题。Homebrew 可能确实不是一个好的包管理器，但确实能解决问题，虽然原理丑陋了一点，但总比手动管理依赖舒服吧！&lt;/p&gt;

&lt;p&gt;除了官方包管理器的缺失外，Homebrew 能上位的另一个重要原因是它天生的“平民属性”。说白了，其实 Homebrew 就是一堆用 Git 管理起来的安装脚本，这大大降低了发布软件的门槛——人人都能编写脚本，发布软件——这也是为什么 Homebrew 会成为 Github 上拥有贡献者最多的项目(永远不要低估人们对于管理自己的软件的热情，想想又多少人是为了 AUR 选择 Arch Linux 的)。这也是为什么我要写这篇文章，教大家如何通过 Homebrew 维护属于自己的软件仓库。&lt;/p&gt;

&lt;h2 id=&#34;基本概念&#34;&gt;基本概念&lt;/h2&gt;

&lt;p&gt;在 Homebrew 的体系中，&lt;strong&gt;至少&lt;/strong&gt;有这么 4 层 ：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tap：软件仓库 (Git 仓库)&lt;/li&gt;
&lt;li&gt;Formula (配方)：定义如何下载、编译和安装脚本或软件的 Ruby 脚本；是 Homebrew 的灵魂&lt;/li&gt;
&lt;li&gt;Cellar (酒窖)：所有用 Homebrew 安装在本地的脚本或软件组成的集合&lt;/li&gt;
&lt;li&gt;Keg (酒桶)：安装好的脚本、软件等&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span class=&#34;spoiler&#34; &gt;怎么都是酒？Homebrew 本身就是“家酿”的意思，它的基本工作原理也是将源码下载下载本地编译；自己体会吧~~&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;我们从上到下来看一下，Tap 实际上就是一个 Git 仓库，也是软件仓库，但与别的包管理器不同的是，Tap 存放的不是已经编译好的二进制文件，而是 Formula，也就是&lt;strong&gt;用来下载、编译和安装脚本或软件的 Ruby 脚本&lt;/strong&gt;。举个例子，假如我们想要安装软件 &lt;code&gt;foo&lt;/code&gt;，我们输入命令 &lt;code&gt;brew install foo&lt;/code&gt;，Homebrew 就会在 Tap 在中寻找与软件 &lt;code&gt;foo&lt;/code&gt; 对应的 Ruby 脚本，然后按照该脚本定义的方法将 Keg (&lt;code&gt;foo&lt;/code&gt;) 下载、编译、安装到 Cellar 中。&lt;/p&gt;

&lt;p&gt;是不是有点绕？没关系，这些概念没必要记得这么清楚，了解个大概，看到了知道是什么东西就可以了。&lt;/p&gt;

&lt;p&gt;Homebrew 的官方为我们提供了两个官方 Tap，&lt;code&gt;homebrew/homebrew-core&lt;/code&gt; 和 &lt;code&gt;homebrew/homebrew-cask&lt;/code&gt;。Homebrew Cask 是用来管理二进制包的，一般用来安装较为大型的软件，已经超出本文的范围了，暂且不谈。而作为官方仓库 &lt;code&gt;homebrew/homebrew-core&lt;/code&gt; 是肯定不会允许你随随便便上传 Formula 的。所以你需要另起炉灶，建立一个自己的 Tap 来存放 Formula。&lt;/p&gt;

&lt;h2 id=&#34;创建-tap&#34;&gt;创建 Tap&lt;/h2&gt;

&lt;p&gt;前面已经提到过了，Tap 实际上就是 Git 仓库 (一般部署在 Github 上面)。不过这个仓库稍微有点特殊，它需要以 &lt;code&gt;homebrew-xxx&lt;/code&gt; 的形式进行命名。就例如我的 Tap 仓库就叫作 &lt;code&gt;Mogeko/homebrew-taps&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;我们先在 Github 上创建相应的仓库，然后我们运行以下命令让 Homebrew 可以跟踪我们的 Tap：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew tap Mogeko/taps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew tap github.com/Mogeko/homebrew-taps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这也就是为什么要让大家以 &lt;code&gt;homebrew-xxx&lt;/code&gt; 的形式命名的原因了，因为只有这种以这种形式命名的仓库可以直接使用 &lt;code&gt;[Owner]/xxx&lt;/code&gt; 这样比较短小好记的命令追踪 Tap，如果不已这样的方式命名或者部署到别的代码托管平台就只能用第二个比较长的命令了。&lt;/p&gt;

&lt;h2 id=&#34;创建-formula&#34;&gt;创建 Formula&lt;/h2&gt;

&lt;p&gt;有了仓库，是时候酿点酒了 (～o￣▽￣)～[ ]&lt;/p&gt;

&lt;p&gt;首先，在 Tap 的根目录下创建一个名为 &lt;code&gt;Formula&lt;/code&gt; 的文件夹，我们所以的 Formula (Ruby 脚本) 都要放在这里。&lt;/p&gt;

&lt;p&gt;然后创建 Formula，我们这里以 &lt;strong&gt;frp&lt;/strong&gt; 为例。&lt;a href=&#34;https://github.com/fatedier/frp&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;frp&lt;/strong&gt;&lt;/a&gt; 是一款用来做内网穿透的代理程序，选它当例子主要是因为它比较好编译。&lt;/p&gt;

&lt;p&gt;首先去 &lt;a href=&#34;https://github.com/fatedier/frp/releases&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;frp 的 releases 页面&lt;/a&gt;，找到最新版的 &lt;strong&gt;frp&lt;/strong&gt;，右键 &lt;code&gt;Source code.tar.gz&lt;/code&gt; -&amp;gt; 复制链接地址。&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;Get_Source&#34; src=&#34;https://mogeko.github.io/images/046/get_source.png&#34; &gt;&lt;/p&gt;

&lt;p&gt;然后打开终端，输入：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew create https://github.com/fatedier/frp/archive/v0.25.1.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Homebrew 会在 &lt;code&gt;/usr/local/Library/Formula/&lt;/code&gt; 下创建一个名为 &lt;code&gt;frp.rb&lt;/code&gt; 的文件，将这个文件放入 Tap 的 &lt;code&gt;Formula&lt;/code&gt; 文件夹中，然后打开它。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Documentation: https://docs.brew.sh/Formula-Cookbook
#                https://www.rubydoc.info/github/Homebrew/brew/master/Formula
# PLEASE REMOVE ALL GENERATED COMMENTS BEFORE SUBMITTING YOUR PULL REQUEST!
class Frp &amp;lt; Formula
  desc &amp;quot;A fast reverse proxy to help you expose a local server behind a NAT or firewall to the internet.&amp;quot;
  homepage &amp;quot;&amp;quot;
  url &amp;quot;https://github.com/fatedier/frp/archive/v0.25.1.tar.gz&amp;quot;
  sha256 &amp;quot;33bda2e559f072e8423d8ef84a66b150c4a5fe986c892cbdd8b5bebe2f7956be&amp;quot;
  # depends_on &amp;quot;cmake&amp;quot; =&amp;gt; :build

  def install
    # ENV.deparallelize  # if your formula fails when building in parallel
    # Remove unrecognized options if warned by configure
    system &amp;quot;./configure&amp;quot;, &amp;quot;--disable-debug&amp;quot;,
                          &amp;quot;--disable-dependency-tracking&amp;quot;,
                          &amp;quot;--disable-silent-rules&amp;quot;,
                          &amp;quot;--prefix=#{prefix}&amp;quot;
    # system &amp;quot;cmake&amp;quot;, &amp;quot;.&amp;quot;, *std_cmake_args
    system &amp;quot;make&amp;quot;, &amp;quot;install&amp;quot; # if this fails, try separate make/make install steps
  end

  test do
    # `test do` will create, run in and delete a temporary directory.
    #
    # This test will fail and we won&#39;t accept that! For Homebrew/homebrew-core
    # this will need to be a test that verifies the functionality of the
    # software. Run the test with `brew test frp`. Options passed
    # to `brew install` such as `--HEAD` also need to be provided to `brew test`.
    #
    # The installed folder is not in the path, so use the entire path to any
    # executables being tested: `system &amp;quot;#{bin}/program&amp;quot;, &amp;quot;do&amp;quot;, &amp;quot;something&amp;quot;`.
    system &amp;quot;false&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;让我们一条一条的分析。&lt;/p&gt;

&lt;h3 id=&#34;基本信息&#34;&gt;基本信息&lt;/h3&gt;

&lt;p&gt;我们可以看到类的头部有 4 个变量：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;desc &amp;quot;A fast reverse proxy to help you expose a local server behind a NAT or firewall to the internet.&amp;quot;
homepage &amp;quot;&amp;quot;
url &amp;quot;https://github.com/fatedier/frp/archive/v0.25.1.tar.gz&amp;quot;
sha256 &amp;quot;33bda2e559f072e8423d8ef84a66b150c4a5fe986c892cbdd8b5bebe2f7956be&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;他们分别表示 &lt;strong&gt;简介 (decs)&lt;/strong&gt;、&lt;strong&gt;主页地址 (homepage)&lt;/strong&gt;、&lt;strong&gt;源码地址 (url)&lt;/strong&gt;和&lt;strong&gt;源码的哈希特征码 (sha256)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;其中三项 Homebrew 已经帮你填好了，剩下的一项主页地址按照实际情况填写就可以了。&lt;/p&gt;

&lt;h3 id=&#34;依赖&#34;&gt;依赖&lt;/h3&gt;

&lt;p&gt;然后是依赖部分，&lt;strong&gt;frp&lt;/strong&gt; 使用 Golang 开发，所以在编译时需要依赖 Golang，我们添加上&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;depends_on &amp;quot;go&amp;quot; =&amp;gt; :build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后 Homebrew 就可以自动帮我们处理依赖了。其中 &lt;code&gt;:build&lt;/code&gt; 表示在编译时依赖，相似的还有&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;:test =&amp;gt; 在运行 brew test 时依赖
:option =&amp;gt; 没用过，不知道有啥用
:recommended =&amp;gt; 也没用过
:xcode =&amp;gt; 需要依赖 Xcode
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更多信息请参考 &lt;a href=&#34;https://docs.brew.sh/Formula-Cookbook&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Homebrew 官方文档: Formula Cookbook&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;编译-安装&#34;&gt;编译 (安装)&lt;/h3&gt;

&lt;p&gt;终于到了最激动人心的编译环节了。首先将&lt;code&gt;install&lt;/code&gt; 中的东西全部删光。它给的示例只是一个参考，并不适用于我们的项目。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def install
  ENV[&amp;quot;GOPROXY&amp;quot;] = &amp;quot;https://goproxy.io&amp;quot;
  system &amp;quot;make&amp;quot;
  bin.install &amp;quot;bin/frps&amp;quot;
  bin.install &amp;quot;bin/frpc&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;frp&lt;/strong&gt; 的根目录中有一个 &lt;code&gt;go.mod&lt;/code&gt; 文件，说明这个项目是支持 Go Module 的。同时，考虑到国内糟糕的网络环境，我们可以考虑通过环境变量 &lt;code&gt;GOPROXY&lt;/code&gt; 设置一个代理。同时 &lt;strong&gt;frp&lt;/strong&gt; 提供了 &lt;code&gt;makefile&lt;/code&gt; 文件，所以我们直接运行 &lt;code&gt;make&lt;/code&gt; 即可编译。编译好后得到两个二进制文件 &lt;code&gt;bin/frps&lt;/code&gt; 和 &lt;code&gt;bin/frpc&lt;/code&gt; 他们分别是 &lt;strong&gt;frp&lt;/strong&gt; 的服务端和客户端。通过 &lt;code&gt;bin.instal&lt;/code&gt; 将编译好的二进制文件安装到 &lt;code&gt;/usr/local/bin/&lt;/code&gt; 中。&lt;/p&gt;

&lt;p&gt;此时，在终端中执行便可开始安装&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew install frp
==&amp;gt; Downloading https://github.com/fatedier/frp/archive/v0.25.1.tar.gz
Already downloaded: /Library/Caches/Homebrew/downloads/232cf62ed11cd378e4be4ff49e5469fa3d62b69ab11668bba02af2db080669f6--v0.25.1.tar.gz
==&amp;gt; make
......
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果没报什么错的话就说明安装成功了。&lt;/p&gt;

&lt;h3 id=&#34;测试-可选&#34;&gt;测试 (可选)&lt;/h3&gt;

&lt;p&gt;有时候安装成功了，但功能不一定完备。我们还可以写两个测试用例来测试一下功能是否完整。&lt;/p&gt;

&lt;p&gt;例如，我这里测试了安装的版本是否正确。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;test do
  output_s = shell_output(&amp;quot;#{bin}/frps -v&amp;quot;)
  assert_match &amp;quot;#{version}&amp;quot;, &amp;quot;v&amp;quot;+output_s
  output_c = shell_output(&amp;quot;#{bin}/frpc -v&amp;quot;)
  assert_match &amp;quot;#{version}&amp;quot;, &amp;quot;v&amp;quot;+output_c
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在终端中输入&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew test frp
Testing mogeko/taps/frp
==&amp;gt; /usr/local/Cellar/frp/v0.25.1/bin/frps -v
==&amp;gt; /usr/local/Cellar/frp/v0.25.1/bin/frpc -v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;没有报错就说明测试成功。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;至此我们的 Formula 就已经完成了，此时的 &lt;code&gt;frp.rb&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Frp &amp;lt; Formula
  desc &amp;quot;A fast reverse proxy to help you expose a local server behind a NAT or firewall to the internet.&amp;quot;
  homepage &amp;quot;https://github.com/fatedier/frp&amp;quot;
  version &amp;quot;v0.25.1&amp;quot;
  url &amp;quot;https://github.com/fatedier/frp/archive/#{version}.tar.gz&amp;quot;
  sha256 &amp;quot;33bda2e559f072e8423d8ef84a66b150c4a5fe986c892cbdd8b5bebe2f7956be&amp;quot;

  depends_on &amp;quot;go&amp;quot; =&amp;gt; :build

  def install
    # ENV[&amp;quot;GO111MODULE&amp;quot;] = &amp;quot;on&amp;quot;
    ENV[&amp;quot;GOPROXY&amp;quot;] = &amp;quot;https://goproxy.io&amp;quot;
    system &amp;quot;make&amp;quot;
    bin.install &amp;quot;bin/frps&amp;quot;
    bin.install &amp;quot;bin/frpc&amp;quot;
  end

  test do
    output_s = shell_output(&amp;quot;#{bin}/frps -v&amp;quot;)
    assert_match &amp;quot;#{version}&amp;quot;, &amp;quot;v&amp;quot;+output_s
    output_c = shell_output(&amp;quot;#{bin}/frpc -v&amp;quot;)
    assert_match &amp;quot;#{version}&amp;quot;, &amp;quot;v&amp;quot;+output_c
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;创建-bottle-可选&#34;&gt;创建 Bottle (可选)&lt;/h2&gt;

&lt;p&gt;虽说 Homebrew 的基本使用方式是&lt;strong&gt;下载源码&lt;/strong&gt; -&amp;gt; &lt;strong&gt;本地编译&lt;/strong&gt; -&amp;gt; &lt;strong&gt;安装&lt;/strong&gt;。但实际生活中使用得更多的却是已经编译好的二进制包，也就是 Bottle。一个 Formula 如果有 Bottle 的话 Homebrew 会默认使用 Bottle，这样除了安装更快以外，也更安全。&lt;code&gt;homebrew/homebrew-core&lt;/code&gt; 中的 Formula 一般都提供了 Bottle。如果条件允许的话，最好为自己的项目添加 Bottle，但二进制文件的分发又成了新的问题。&lt;/p&gt;

&lt;p&gt;Bottle 在 Ruby 脚本中长这样：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;bottle do
  sha256 &amp;quot;4921af80137af9cc3d38fd17c9120da882448a090b0a8a3a19af3199b415bfca&amp;quot; =&amp;gt; :sierra
  sha256 &amp;quot;c71db15326ee9196cd98602e38d0b7fb2b818cdd48eede4ee8eb827d809e09ba&amp;quot; =&amp;gt; :el_capitan
  sha256 &amp;quot;85cc828a96735bdafcf29eb6291ca91bac846579bcef7308536e0c875d6c81d7&amp;quot; =&amp;gt; :yosemite
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;中间 3 行的 sha256 是二进制文件的哈哈希特征码，后面的 &lt;code&gt;:sierra&lt;/code&gt;、&lt;code&gt;:el_capitan&lt;/code&gt; 和 &lt;code&gt;:yosemite&lt;/code&gt; 是二进制文件对应的系统版本。&lt;/p&gt;

&lt;p&gt;Bottle 还可以定义 &lt;code&gt;root_url&lt;/code&gt; 等，具体可以参考：&lt;a href=&#34;https://docs.brew.sh/Bottles&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Homebrew 官方文档: Bottle&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;制作-bottle&#34;&gt;制作 Bottle&lt;/h3&gt;

&lt;p&gt;通过一下两行命令就可以轻松的制作 Bottle 了 (如果已经安装过 &lt;strong&gt;frp&lt;/strong&gt; 的话使用 &lt;code&gt;reinstall&lt;/code&gt;)：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew (re)install --build-bottle frp
$ brew bottle --json frp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不出意外的话会在当前目录下生成两个新文件：&lt;code&gt;frp--v0.25.1.x86_64_linux.bottle.json&lt;/code&gt; 和 &lt;code&gt;frp--v0.25.1.x86_64_linux.bottle.tar.gz&lt;/code&gt;。&lt;code&gt;frp--v0.25.1.x86_64_linux.bottle.tar.gz&lt;/code&gt; 就是打包好的二进制文件。配置好 &lt;code&gt;frp.rb&lt;/code&gt;，然后将其上传到 Github Releases 等分发平台就可以了。&lt;/p&gt;

&lt;p&gt;可以用 Travis CI 等持续集成平台来制作与发布 Bottle，我没试过，有兴趣的同学可以自己研究一下。&lt;/p&gt;

&lt;h2 id=&#34;相关文章&#34;&gt;相关文章&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mogeko.me/2019/049/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;使用 Travis CI 自动维护软件仓库 (Homebrew)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>扁平宝箱插画</title>
      <link>https://mogeko.me/2019/045/</link>
      <pubDate>Wed, 23 Jan 2019 20:05:01 +0800</pubDate>
      
      <guid>https://mogeko.me/2019/045/</guid>
      <description>

&lt;!-- 
&lt;img alt=&#34;&#34; src=&#34;https://mogeko.github.io/images/045/&#34; &gt;
&lt;span class=&#34;spoiler&#34; &gt;&lt;/span&gt;
&amp;emsp;&amp;emsp;
 --&gt;

&lt;p&gt;&lt;img src=&#34;https://mogeko.github.io/images/045/Treasure.svg&#34; alt=&#34;扁平宝箱图形&#34; /&gt;&lt;/p&gt;

&lt;p&gt;原图：&lt;a href=&#34;https://mogeko.github.io/images/045/Treasure.ai&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Treasure.ai&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;以下是使用到的颜色&#34;&gt;以下是使用到的颜色&lt;/h2&gt;

&lt;p&gt;据说&lt;a href=&#34;javascript:void(0);&#34; class=&#34;theme-switch&#34;&gt;黑暗模式&lt;/a&gt;下体验更佳哦  |・ω・｀)&lt;/p&gt;

&lt;p&gt;&lt;div style=&#34;display:flex;&#34;&gt;
    &lt;b style=&#34;width:74px;display:inline-block&#34;&gt;宝箱：&lt;/b&gt;
    &lt;div style=&#34;-webkit-flex:1;flex:1;&#34;&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#FFB024;&#34;&gt;▉ #FFB024&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#EB9558;&#34;&gt;▉ #EB9558&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#FFC444;&#34;&gt;▉ #FFC444&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#ED6011;&#34;&gt;▉ #ED6011&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#7C2752;&#34;&gt;▉ #7C2752&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#542246;&#34;&gt;▉ #542246&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#CC365D;&#34;&gt;▉ #CC365D&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#7E2A55;&#34;&gt;▉ #7E2A55&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#FFE59C;&#34;&gt;▉ #FFE59C&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#FC5454;&#34;&gt;▉ #FC5454&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div style=&#34;display:flex;&#34;&gt;
    &lt;b style=&#34;width:74px;display:inline-block&#34;&gt;宝石：&lt;/b&gt;
    &lt;div style=&#34;-webkit-flex:1;flex:1;&#34;&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#AF629D&#34;&gt;▉ #AF629D&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#FFFFFF&#34;&gt;▉ #FFFFFF&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#FC5454&#34;&gt;▉ #FC5454&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#CC365D&#34;&gt;▉ #CC365D&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div style=&#34;display:flex;&#34;&gt;
    &lt;b style=&#34;width:74px;display:inline-block&#34;&gt;小星星：&lt;/b&gt;
    &lt;div style=&#34;-webkit-flex:1;flex:1;&#34;&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#FFC444&#34;&gt;▉ #FFC444&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#FFFFFF&#34;&gt;▉ #FFFFFF&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div style=&#34;display:flex;&#34;&gt;
    &lt;b style=&#34;width:74px;display:inline-block&#34;&gt;背景：&lt;/b&gt;
    &lt;div style=&#34;-webkit-flex:1;flex:1;&#34;&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#542246&#34;&gt;▉ #542246&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;然后以下是画图的具体步骤&#34;&gt;然后以下是画图的具体步骤&lt;/h2&gt;

&lt;p&gt;来源：&lt;a href=&#34;https://www.zcool.com.cn/article/ZODU5MTcy.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;【零基础学Ai教程】扁平宝箱图形&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;作者：&lt;a href=&#34;https://www.zcool.com.cn/u/14824754&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Ai肖博士&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;000&#34; src=&#34;https://mogeko.github.io/images/045/000.jpg&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;001&#34; src=&#34;https://mogeko.github.io/images/045/001.jpg&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;002&#34; src=&#34;https://mogeko.github.io/images/045/002.jpg&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;003&#34; src=&#34;https://mogeko.github.io/images/045/003.jpg&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;004&#34; src=&#34;https://mogeko.github.io/images/045/004.jpg&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;005&#34; src=&#34;https://mogeko.github.io/images/045/005.jpg&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;006&#34; src=&#34;https://mogeko.github.io/images/045/006.jpg&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;007&#34; src=&#34;https://mogeko.github.io/images/045/007.jpg&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rust 中的错误处理</title>
      <link>https://mogeko.me/2019/044/</link>
      <pubDate>Wed, 23 Jan 2019 12:50:59 +0800</pubDate>
      
      <guid>https://mogeko.me/2019/044/</guid>
      <description>

&lt;!-- 
&lt;img alt=&#34;&#34; src=&#34;https://mogeko.github.io/images/044/&#34; &gt;
&lt;span class=&#34;spoiler&#34; &gt;&lt;/span&gt;
&amp;emsp;&amp;emsp;
 --&gt;

&lt;p&gt;异常/错误处理 &lt;a href=&#34;#sup1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; 被称作是&lt;strong&gt;“第四流程控制语句”&lt;/strong&gt;，在现代程序设计中发挥着越来越重要的作用。一般的语言喜欢使用 &lt;code&gt;try...catch...&lt;/code&gt; 语句捕捉异常，这样做看似很符合逻辑，却很难将代码写得优雅：如果在异常抛出处处理，容易破坏业务逻辑的完整性，不优雅；如果将所有的异常放在一起统一处理，又容易出现忘记处理的情况。所以如何处理异常，何时处理异常是一件非常考验程序员经验的事情。但 Rust 就不同了。&lt;/p&gt;

&lt;p&gt;Rust 中的错误处理方式是我见过最优雅的。Rust 中并没有异常，而主要是使用一种名为 &lt;code&gt;Result&lt;/code&gt; (实际上是一种枚举) 的概念处理错误。它的好处就在于不会影响业务逻辑，因为它本身就是业务逻辑的一部分！&lt;/p&gt;

&lt;p&gt;Rust 中，有两种错误：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可恢复错误&lt;/strong&gt; (&lt;em&gt;recoverable&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不可恢复错误&lt;/strong&gt; (&lt;em&gt;unrecoverable&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大部分语言不区分这两类错误，并使用相似的逻辑处理他们。Rust 使用 &lt;code&gt;Result&lt;/code&gt; 和 &lt;code&gt;panic!&lt;/code&gt; 处理可恢复错误，在遇到不可恢复错误时直接使用 &lt;code&gt;panic!&lt;/code&gt; 停止程序执行。&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;Rust 中的错误类型&#34; src=&#34;https://mogeko.github.io/images/044/type_0f_wrong.png&#34; &gt;&lt;/p&gt;

&lt;p&gt;先来解释一下 &lt;code&gt;panic!&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;i id=&#34;sup1&#34; style=&#34;color: #989898&#34;&gt;&lt;sup&gt;1&lt;/sup&gt; &lt;strong&gt;异常&lt;/strong&gt;和&lt;strong&gt;错误&lt;/strong&gt;是有区别的，这里只比较他们的相似性，不多做区分。&lt;/i&gt;&lt;/p&gt;

&lt;h1 id=&#34;panic&#34;&gt;panic!&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;panic!&lt;/code&gt; 处理错误时会采用&lt;strong&gt;展开&lt;/strong&gt; (unwinding) 和&lt;strong&gt;终止&lt;/strong&gt; (abort) 两种策略处理栈上的数据。&lt;/p&gt;

&lt;p&gt;展开的意思就是说 Rust 会回溯栈并一层一层的清理它遇到的每一个函数的数据，就像这样：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs
     Running `target/debug/panic`
thread &#39;main&#39; panicked at &#39;index out of bounds: the len is 3 but the index is 99&#39;, /checkout/src/liballoc/vec.rs:1555:10
stack backtrace:
   0: std::sys:👿:backtrace::tracing:👿:unwind_backtrace
             at /checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:49
   1: std::sys_common::backtrace::_print
             at /checkout/src/libstd/sys_common/backtrace.rs:71
   2: std::panicking::default_hook::{{closure}}
             at /checkout/src/libstd/sys_common/backtrace.rs:60
             at /checkout/src/libstd/panicking.rs:381
   3: std::panicking::default_hook
             at /checkout/src/libstd/panicking.rs:397
   4: std::panicking::rust_panic_with_hook
             at /checkout/src/libstd/panicking.rs:611
   5: std::panicking::begin_panic
             at /checkout/src/libstd/panicking.rs:572
   6: std::panicking::begin_panic_fmt
             at /checkout/src/libstd/panicking.rs:522
   7: rust_begin_unwind
             at /checkout/src/libstd/panicking.rs:498
   8: core::panicking::panic_fmt
             at /checkout/src/libcore/panicking.rs:71
   9: core::panicking::panic_bounds_check
             at /checkout/src/libcore/panicking.rs:58
  10: &amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt; as core::ops::index::Index&amp;lt;usize&amp;gt;&amp;gt;::index
             at /checkout/src/liballoc/vec.rs:1555
  11: panic::main
             at src/main.rs:4
  12: __rust_maybe_catch_panic
             at /checkout/src/libpanic_unwind/lib.rs:99
  13: std::rt::lang_start
             at /checkout/src/libstd/panicking.rs:459
             at /checkout/src/libstd/panic.rs:361
             at /checkout/src/libstd/rt.rs:61
  14: main
  15: __libc_start_main
  16: &amp;lt;unknown&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;是不是很像异常？Rust 默认使用展开的策略清理内存，不过展开堆栈需要额外记录堆栈信息，这会对二进制程序的大小以及执行效率 (微乎其微) 产生影响。&lt;/p&gt;

&lt;p&gt;另一种选择是直接终止，这会不清理数据就直接退出。剩下的一堆烂摊子扔给操作系统来处理。&lt;/p&gt;

&lt;p&gt;展开堆栈时可以用 &lt;code&gt;std::panic::catch_unwind&lt;/code&gt; 捕获 &lt;code&gt;panic&lt;/code&gt; 抛出的堆栈，但是&lt;strong&gt;极不&lt;/strong&gt;推荐用这种方法来处理错误。&lt;code&gt;catch_unwind&lt;/code&gt; 一般是用来在多线程程序里面在将挂掉的线程 catch 住，防止一个线程挂掉导致整个进程崩掉，或者是通过外部函数接口 (FFI) 与 C 交互时将堆栈信息兜住防止 C 程序看到堆栈不知道如何处理。另外并不是所有程序都能用 &lt;code&gt;catch_unwind&lt;/code&gt; 捕捉，有的嵌入式平台上的程序受限于二进制文件大小的限制，&lt;code&gt;panic&lt;/code&gt; 没有使用展开，而是使用终止的方式退出程序，这就没法兜得住了。&lt;/p&gt;

&lt;h1 id=&#34;result&#34;&gt;Result&lt;/h1&gt;

&lt;p&gt;就下来介绍一种更常用也是我最喜欢的一种错误处理方式：&lt;code&gt;Result&lt;/code&gt; 类型。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Result&lt;/code&gt; 的本质是一个枚举类型。首先我们需要了解一下什么是枚举。&lt;/p&gt;

&lt;h2 id=&#34;result-与枚举&#34;&gt;Result 与枚举&lt;/h2&gt;

&lt;p&gt;枚举是 Rust 特有的一种类型，与 F#、OCaml 和 Haskell 这样的函数式编程语言中的&lt;strong&gt;代数数据类型&lt;/strong&gt; (&lt;em&gt;algebraic data types&lt;/em&gt;) 最为相似。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Result&lt;/code&gt; 是 Rust 自带的一个已经定义好了的枚举。&lt;code&gt;Result&lt;/code&gt; 中定义了两个成员：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;enum Result&amp;lt;T, E&amp;gt; {
    Ok(T),
    Err(E),
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;OK&lt;/code&gt; 表示成功的情况，&lt;code&gt;Err&lt;/code&gt; 表示出错的情况 (&lt;code&gt;T&lt;/code&gt; 和 &lt;code&gt;E&lt;/code&gt; 分别表示 &lt;code&gt;OK&lt;/code&gt; 或 &lt;code&gt;Err&lt;/code&gt; 中数据的类型)。如果你调用了一个可能会出错的函数，那么函数将会返回一个 &lt;code&gt;Result&lt;/code&gt; 枚举。一个枚举实例表示枚举类型定义的成员中的&lt;strong&gt;任意&lt;/strong&gt;一项，反映到 &lt;code&gt;Result&lt;/code&gt; 上就是 &lt;code&gt;OK&lt;/code&gt; 或 &lt;code&gt;Err&lt;/code&gt;。也就是说函数返回的 &lt;code&gt;Result&lt;/code&gt; 既可能是一个包含 &lt;code&gt;OK&lt;/code&gt; 的 &lt;code&gt;Result&lt;/code&gt;，也可能是一个包含 &lt;code&gt;Err&lt;/code&gt; 的 &lt;code&gt;Result&lt;/code&gt;，这有点类似于“薛定谔的猫”——处于生与死的叠加态——可以说 &lt;code&gt;Result&lt;/code&gt; 处于 &lt;code&gt;OK&lt;/code&gt; 与 &lt;code&gt;Err&lt;/code&gt; 的“叠加态”。&lt;/p&gt;

&lt;p&gt;那么这又有什么好处呢？&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Result&lt;/code&gt; 的优越性就在于：无论程序出错与否，&lt;strong&gt;函数返回的值的类型始相同的！&lt;/strong&gt;函数的调用者可以采用相同的方式行云流水般的处理 &lt;code&gt;Result&lt;/code&gt;。也就是说，无论成功与否，函数的调用者都要处理 &lt;code&gt;Result&lt;/code&gt;，错误处理成为了业务逻辑的一部分。&lt;/p&gt;

&lt;h2 id=&#34;处理错误&#34;&gt;处理错误&lt;/h2&gt;

&lt;p&gt;我们已经成功的获得了从调用的函数手里返回的 &lt;code&gt;Result&lt;/code&gt;，我们并不知道执行到底有没有成功。这时我们就应该开始处理错误了。&lt;/p&gt;

&lt;h3 id=&#34;unwrap-与-expect&#34;&gt;unwrap 与 expect&lt;/h3&gt;

&lt;p&gt;我们先看这么一个例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use std::fs::File;

fn main() {
    let f1 = File::open(&amp;quot;hello.txt&amp;quot;).unwrap();
    let f2 = File::open(&amp;quot;hello.txt&amp;quot;).expect(&amp;quot;Failed to open hello.txt&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;代码中，我们使用 &lt;code&gt;File::open&lt;/code&gt; 来读打开一个名为 &lt;code&gt;hello.txt&lt;/code&gt; 的文件。函数 &lt;code&gt;File::open&lt;/code&gt; 将会返回一个 &lt;code&gt;io::Result&lt;/code&gt;。Rust 标准库中有很多叫做 &lt;code&gt;Result&lt;/code&gt; 的类型，&lt;code&gt;io::Result&lt;/code&gt; 是其中之一，并且 &lt;code&gt;io::Result&lt;/code&gt; 的实例拥有 &lt;code&gt;unwrap&lt;/code&gt; 方法和 &lt;code&gt;expect&lt;/code&gt; 方法。 如果程序执行成功 &lt;code&gt;unwrap&lt;/code&gt; 或 &lt;code&gt;expect&lt;/code&gt; 方法会将正确的值取出来，如果出错就直接让程序挂掉。其中 &lt;code&gt;unwrap&lt;/code&gt; 方法在挂掉时会打印出标准库内置的错误信息，而 &lt;code&gt;exprct&lt;/code&gt; 则让我们可以自己定义一个字符串在程序挂掉时显示。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;unwrap&lt;/code&gt; /&lt;code&gt;expect&lt;/code&gt; 并不是一个好的错误处理方式。 &lt;strong&gt;&lt;code&gt;unwrap&lt;/code&gt; 和 &lt;code&gt;expect&lt;/code&gt; 只会捕捉错误，然后终止程序，并没有真正的处理错误。&lt;/strong&gt;所以 &lt;code&gt;unwrap&lt;/code&gt; 和 &lt;code&gt;expect&lt;/code&gt; 一般只是用于原型设计。&lt;/p&gt;

&lt;h3 id=&#34;match&#34;&gt;match&lt;/h3&gt;

&lt;p&gt;使用 &lt;code&gt;match&lt;/code&gt; 来处理错误是最常用，也是最推崇的做法。还是刚刚的那个例子，如果用 &lt;code&gt;match&lt;/code&gt; 来写的话：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use std::fs::File;

fn main() {
    let f = File::open(&amp;quot;hello.txt&amp;quot;);

    let f = match f {
        Ok(file) =&amp;gt; file,
        Err(error) =&amp;gt; {
            panic!(&amp;quot;There was a problem opening the file: {:?}&amp;quot;, error)
        },
    };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以把 &lt;code&gt;match&lt;/code&gt; 表达式想象成某种硬币分类器：硬币滑入有着不同大小孔洞的轨道，每一个硬币都会掉入符合它大小的孔洞。同样地，值也会通过 &lt;code&gt;match&lt;/code&gt; 的每一个模式，并且在遇到第一个 “符合” 的模式时，值会进入相关联的代码块并在执行中被使用。&lt;/p&gt;

&lt;p&gt;在本例中，&lt;code&gt;f&lt;/code&gt; 就是那个硬币，&lt;code&gt;OK&lt;/code&gt; 和 &lt;code&gt;Err&lt;/code&gt; 就是那个孔；&lt;code&gt;match&lt;/code&gt; 会把 &lt;code&gt;f&lt;/code&gt; (&lt;code&gt;io::Result&lt;/code&gt;) 实例中值的类型与 &lt;code&gt;OK&lt;/code&gt; 、&lt;code&gt;Err&lt;/code&gt; 做匹配，如果匹配到了合适的类型就执行 &lt;code&gt;=&amp;gt;&lt;/code&gt; 后的表达式。当结果是 &lt;code&gt;Ok&lt;/code&gt; 时，返回 &lt;code&gt;Ok&lt;/code&gt; 成员中的 &lt;code&gt;file&lt;/code&gt; 值，然后将这个文件句柄赋值给变量 &lt;code&gt;f&lt;/code&gt;。当结果是 &lt;code&gt;Err&lt;/code&gt; 时，我们选择调用 &lt;code&gt;panic!&lt;/code&gt;宏。&lt;/p&gt;

&lt;h2 id=&#34;匹配不同的错误&#34;&gt;匹配不同的错误&lt;/h2&gt;

&lt;p&gt;上文的代码不管 &lt;code&gt;File::open&lt;/code&gt; 是因为什么原因失败都会 &lt;code&gt;panic!&lt;/code&gt;。我们真正希望的是对不同的错误原因采取不同的行为：如果 &lt;code&gt;File::open&lt;/code&gt;因为文件不存在而失败，我们希望创建这个文件并返回新文件的句柄。如果 &lt;code&gt;File::open&lt;/code&gt; 因为任何其他原因失败，例如没有打开文件的权限，我们仍然希望 &lt;code&gt;panic!&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;只需要增加一个 &lt;code&gt;match&lt;/code&gt; 就可以了：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use std::fs::File;
use std::io::ErrorKind;

fn main() {
    let f = File::open(&amp;quot;hello.txt&amp;quot;);

    let f = match f {
        Ok(file) =&amp;gt; file,
        Err(error) =&amp;gt; match error.kind() {
            ErrorKind::NotFound =&amp;gt; match File::create(&amp;quot;hello.txt&amp;quot;) {
                Ok(fc) =&amp;gt; fc,
                Err(e) =&amp;gt; panic!(&amp;quot;Tried to create file but there was a problem: {:?}&amp;quot;, e),
            },
            other_error =&amp;gt; panic!(&amp;quot;There was a problem opening the file: {:?}&amp;quot;, other_error),
        },
    };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果觉得太麻烦了，还可以使用闭包：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use std::fs::File;
use std::io::ErrorKind;

fn main() {
    let f = File::open(&amp;quot;hello.txt&amp;quot;).map_err(|error| {
        if error.kind() == ErrorKind::NotFound {
            File::create(&amp;quot;hello.txt&amp;quot;).unwrap_or_else(|error| {
                panic!(&amp;quot;Tried to create file but there was a problem: {:?}&amp;quot;, error);
            })
        } else {
            panic!(&amp;quot;There was a problem opening the file: {:?}&amp;quot;, error);
        }
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;传播错误&#34;&gt;传播错误&lt;/h2&gt;

&lt;p&gt;Rust 允许程序像别的语言处理“异常”一样的将错误扔给更上一层的调用者，这被称为&lt;strong&gt;传播&lt;/strong&gt; (propagating)错误。&lt;/p&gt;

&lt;p&gt;如果文件不存在或不能读取，这个函数会将这些错误返回给调用它的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use std::io;
use std::io::Read;
use std::fs::File;

fn read_username_from_file() -&amp;gt; Result&amp;lt;String, io::Error&amp;gt; {
    let f = File::open(&amp;quot;hello.txt&amp;quot;);

    let mut f = match f {
        Ok(file) =&amp;gt; file,
        Err(e) =&amp;gt; return Err(e),
    };

    let mut s = String::new();

    match f.read_to_string(&amp;amp;mut s) {
        Ok(_) =&amp;gt; Ok(s),
        Err(e) =&amp;gt; Err(e),
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在上面的代码中，程序会尝试打开一个名为 &lt;code&gt;hello.txt&lt;/code&gt; 的文件，如果失败将会提前返回一个包含 &lt;code&gt;Err&lt;/code&gt; 的 &lt;code&gt;Result&lt;/code&gt;；如果成功，则将会尝试读取 &lt;code&gt;hello.txt&lt;/code&gt; 中的信息，如果成功则会返回包含储存了被读取信息的 &lt;code&gt;String&lt;/code&gt; 的 &lt;code&gt;Result&lt;/code&gt;，否则返回包含 &lt;code&gt;Err&lt;/code&gt; 的 &lt;code&gt;Result&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;也可以使用 &lt;code&gt;?&lt;/code&gt; 简写：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use std::io;
use std::io::Read;
use std::fs::File;

fn read_username_from_file() -&amp;gt; Result&amp;lt;String, io::Error&amp;gt; {
    let mut s = String::new();

    File::open(&amp;quot;hello.txt&amp;quot;)?.read_to_string(&amp;amp;mut s)?;

    Ok(s)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这段代码与上一段代码的作用相同：打开文件 -&amp;gt; 读取文件；但是这一段代码更简洁。&lt;code&gt;File::open&lt;/code&gt; 调用结尾的 &lt;code&gt;?&lt;/code&gt; 将会返回 &lt;code&gt;Ok&lt;/code&gt; 中的值，也就是文件 &lt;code&gt;hello.txt&lt;/code&gt; 的文件句柄。如果出现了错误，&lt;code&gt;?&lt;/code&gt; 会提早返回整个函数并将一些 &lt;code&gt;Err&lt;/code&gt; 值传播给调用者。同理也适用于 &lt;code&gt;read_to_string&lt;/code&gt; 调用结尾的 &lt;code&gt;?&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;match&lt;/code&gt; 表达式与问号运算符所做的有一点不同：&lt;code&gt;?&lt;/code&gt; 所使用的错误值被传递给了 &lt;code&gt;from&lt;/code&gt; 函数，它定义于标准库的 &lt;code&gt;From&lt;/code&gt; trait 中，其用来将错误从一种类型转换为另一种类型。当 &lt;code&gt;?&lt;/code&gt; 调用 &lt;code&gt;from&lt;/code&gt; 函数时，收到的错误类型被转换为定义为当前函数返回的错误类型。这在当一个函数返回一个错误类型来代表所有可能失败的方式时很有用，即使其可能会因很多种原因失败。只要每一个错误类型都实现了 &lt;code&gt;from&lt;/code&gt; 函数来定义如将其转换为返回的错误类型，&lt;code&gt;?&lt;/code&gt; 会自动处理这些转换。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;?&lt;/code&gt; 只能被用于返回 &lt;code&gt;Result&lt;/code&gt; 的函数&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Little Printf</title>
      <link>https://mogeko.me/2019/043/</link>
      <pubDate>Sat, 19 Jan 2019 18:28:13 +0800</pubDate>
      
      <guid>https://mogeko.me/2019/043/</guid>
      <description>

&lt;!-- 
&lt;img alt=&#34;&#34; src=&#34;https://mogeko.github.io/images/043/&#34; &gt;
&lt;span class=&#34;spoiler&#34; &gt;&lt;/span&gt;
&amp;emsp;&amp;emsp;
 --&gt;

&lt;p&gt;原文地址 (英文): &lt;a href=&#34;https://ferd.ca/the-little-**Printf**.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;The Little &lt;strong&gt;Printf&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;本文是原作者 &lt;a href=&#34;http://twitter.com/mononcqc/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Fred Hebert&lt;/a&gt; 模仿《小王子》的笔法写的一篇演讲稿，同时也是一篇不错的小故事。主要探讨了一个既简单又复杂的问题：&lt;strong&gt;什么才是真正的程序员？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;慢慢看下去，定会受益良多！&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;Cover&#34; src=&#34;https://mogeko.github.io/images/043/printf.png&#34; &gt;&lt;/p&gt;

&lt;h2 id=&#34;第一章&#34;&gt;第一章&lt;/h2&gt;

&lt;p&gt;我很幸运能够出生在一个计算机和游戏还没有普及的年代。我很幸运能有机会与朋友和兄弟在户外玩耍，同时发明一些属于我们的游戏。&lt;/p&gt;

&lt;p&gt;我们都是自己的英雄，用一根树枝做成弓箭、枪、剑甚至是望远镜。树枝可以做成任何东西，除了回旋镖。因为你一旦把它扔出去，你需要自己捡回来。&lt;/p&gt;

&lt;p&gt;突然，我们长大了，上面的游戏变得很幼稚。当周围的人开始以成熟为荣时，你不能再把松果当成手榴弹扔出去，也不能假装自己会魔法。你最终会在压力中长大。不过总的来说是一个非常幸福的童年。&lt;/p&gt;

&lt;p&gt;一次偶然的机会，我接触到了计算机和电子游戏。这可能是你曾经想象中的某一个虚拟的世界。你花时间玩游戏，寻求着与现实生活不一样的体验。&lt;/p&gt;

&lt;p&gt;但大多数游戏都有一个共同点：你不能创造，你只能花费时间玩已经设定好的程序。我在十多岁时参加过“即兴表演”。在那里我可以与人合作并发挥我的创造力。&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;improvisational&#34; src=&#34;https://mogeko.github.io/images/043/improv.png&#34; &gt;&lt;/p&gt;

&lt;p&gt;当然，魁北克的即兴表演舞台是不同的；这里是一个溜冰场。&lt;/p&gt;

&lt;p&gt;我在大学学习的专业是“多媒体”，但最终我却从事了与编程相关的工作。编程真 TM 的 AMAZING！我可以发挥我的创造力，还能赚钱！之后我做了我的第一个游戏：&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;game&#34; src=&#34;https://mogeko.github.io/images/043/game.png&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“这不是一个真正的视频游戏。”&lt;/span&gt;，我被告知。&lt;span style=&#34;color: #555;&#34; &gt;“那只是一个HTML表单。您使用数组作为文本和选项会更好。而且代码需要简化。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;这些评价让我有点沮丧；但这游戏确实只是 11 页文档而已。我意识到如果我想创造更多被人认可的东西，我必须要学习更多的知识。&lt;/p&gt;

&lt;p&gt;我必须要学习“真正的编程”。我从 GUI 工具包中的 JavaScript 开始，慢慢学习更多的语言，比如 PHP。但这一切不是很顺利。其他人建议我尝试一下 Python，然后我学会了。&lt;/p&gt;

&lt;p&gt;但 Python 中的一些比较高级的特性：&lt;code&gt;lambdas&lt;/code&gt; 和 面向对象编程 等我都看得云里雾里。后来别人建议我去读一下《计算机程序的构造和解释》(SICP)，因为它是编程的基础入门圣经&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;SICP&#34; src=&#34;https://mogeko.github.io/images/043/sicp.png&#34; &gt;&lt;/p&gt;

&lt;p&gt;就这样，我知道了 Scheme。后来我通过 K&amp;amp;R 的书学习了 C 语言，因为真正的程序猿都会写 C 语言，我在当地的大学注册了兼职课程，因为真正的程序猿都知道数学和数据结构，虽然我只学到了一点皮毛。我开始阅读技术类文章和论文，因为真正的程序设计方面的知识更新得很快。&lt;/p&gt;

&lt;p&gt;经过一段时间，我学会了 Erlang，并以此开始了我的职业生涯。分奇怪的是：我这个没有用 Erlang 做过任何生产级别的开发的人，却得到了一份教 Erlang 的工作。&lt;/p&gt;

&lt;h2 id=&#34;第二章&#34;&gt;第二章&lt;/h2&gt;

&lt;p&gt;我忙于到世界各地去演讲，告诉人们如何做那些“我从没做过的事情”。而每个人似乎都相信我是一个真正的程序员，因为我讲的事情大多与程序无关。&lt;/p&gt;

&lt;p&gt;一天，从会议回家的路上，我因为飞机晚点被困在了候机室。我愤怒的敲击着键盘，一个温柔的声音问我：&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“如果你愿意，可以请你给我设计一个系统吗？”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“什么？”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“给我设计一个系统！”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;我对这一请求感到惊讶。我抬起头，看到一个渴望成为程序猿的孩子。他自称“&lt;strong&gt;Printf&lt;/strong&gt;”。我觉得这个名字很傻。他大概长这样：&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;**Printf**&#34; src=&#34;https://mogeko.github.io/images/043/printf-nocover.png&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“我还不是很了解电脑，但你看起来像是这方面的专家。我想写一个 Blog 程序，让人们可以使用和访问它。请你帮我设计一个系统！”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;这是个令人惊讶的请求，而且我已经二十多个小时没有合眼了，我不太确定有没有完全 get 到他的意思。我告诉他设计系统很难。我不知道他的需求是什么：需要供多少人使用？在哪里部署？我无法根据他提供的如此少的信息设计一个合适的系统。&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“没关系，给我设计一个系统吧。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;所以我画了一张架构图：&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;Architecture&#34; src=&#34;https://mogeko.github.io/images/043/arch1.png&#34; &gt;&lt;/p&gt;

&lt;p&gt;他看了后说：&lt;span style=&#34;color: #555;&#34; &gt;“不，它还不够好。请再给我设计一个别的。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;于是我画了这个：&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;Architecture&#34; src=&#34;https://mogeko.github.io/images/043/arch2.png&#34; &gt;&lt;/p&gt;

&lt;p&gt;然后我给他讲了这个系统的工作原理。&lt;/p&gt;

&lt;p&gt;我的新朋友礼貌的笑了笑。&lt;span style=&#34;color: #555;&#34; &gt;“这不是我想要的系统，它太复杂了，有很多我不需要的东西。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;我感到有点不爽，我的设计中考虑到了冗余、监控、备份、缓存、负载、故障转移、部署简单等等。我的工作都可以收取一笔可观的咨询费了！我已经失去耐心了，所以我画了这个：&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;Blackbox&#34; src=&#34;https://mogeko.github.io/images/043/blackbox.png&#34; &gt;&lt;/p&gt;

&lt;p&gt;我告诉他：&lt;span style=&#34;color: #555;&#34; &gt;“这是你要的系统，在这个黑盒子里面。”&lt;/span&gt;我希望这个敷衍的答案能够让他离开。但我很惊讶的听到：&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“这就是我想要的！”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;这就是我与小 &lt;strong&gt;Printf&lt;/strong&gt; 的第一次相遇。&lt;/p&gt;

&lt;h2 id=&#34;第三章&#34;&gt;第三章&lt;/h2&gt;

&lt;p&gt;我很快了解到了这个小家伙的编程水平。在他的代码仓库里只有一些简单的小程序、网站的小 demo、简单的命令行工具。都是些简单的小把戏。&lt;/p&gt;

&lt;p&gt;然后他开始去做一些使用多个模块的大型程序。这个程序需要处理 &lt;code&gt;socket&lt;/code&gt;、读写磁盘、用到数据库。当它第一次跑起来的时候，小 &lt;strong&gt;Printf&lt;/strong&gt; 十分兴奋。但是，这个程序称之为好还为时尚早了点。&lt;/p&gt;

&lt;p&gt;这个程序需要重构、更好的测试、文档、Linting (代码静态检测)、分析。这个程序跑了一段时间，最终还是崩了。&lt;/p&gt;

&lt;p&gt;然后一次有一次的崩溃！&lt;/p&gt;

&lt;p&gt;配置错误，日志不工作，磁盘读写不稳定，网络卡顿，有 bug，编码混乱，数据库里有脏数据，证书过期，没有异常处理等等原因导致问题找不到根源。&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;spaghetti&#34; src=&#34;https://mogeko.github.io/images/043/spaghetti.png&#34; &gt;&lt;/p&gt;

&lt;p&gt;简直像面条一样一团糟。&lt;/p&gt;

&lt;p&gt;小 &lt;strong&gt;Printf&lt;/strong&gt; 跟我说：&lt;span style=&#34;color: #555;&#34; &gt;“我简直是一无所知！我应该根据我的需求去判断。我写了一个花哨但难以伺候的系统，后来我花在修复 bug 上的时间和精力比它带给我的好处完全不成正比。不过，我确实学到了不少东西。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;一天早上，他决定离开这里。&lt;span style=&#34;color: #555;&#34; &gt;“再见”&lt;/span&gt;，他跟我做最后的道别。他想去看看外面的世界，看看别的程序猿写的程序。&lt;/p&gt;

&lt;p&gt;小 &lt;strong&gt;Printf&lt;/strong&gt; 写的程序，最后因为不断增加的日志，撑爆了硬盘，彻底崩溃了。&lt;/p&gt;

&lt;h2 id=&#34;第四章&#34;&gt;第四章&lt;/h2&gt;

&lt;p&gt;&lt;img alt=&#34;Building&#34; src=&#34;https://mogeko.github.io/images/043/building.png&#34; &gt;&lt;/p&gt;

&lt;p&gt;小 &lt;strong&gt;Printf&lt;/strong&gt; 来到一个办公楼，寻找最有经验的开发人员，并希望获得他的提示和帮助。&lt;/p&gt;

&lt;p&gt;他遇到了一个骄傲的高级工程师，他对自己的技术相当有自信。&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;proud senior engineer&#34; src=&#34;https://mogeko.github.io/images/043/pro.png&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“嘿，菜鸟！欢迎来到我的地盘，我可是这一领域的专家！”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“专家？”&lt;/span&gt;小 &lt;strong&gt;Printf&lt;/strong&gt; 问道。&lt;span style=&#34;color: #555;&#34; &gt;“专家的意思是可以搞定任何程序吗？”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“是的！”&lt;/span&gt;骄傲的程序猿回答到，接着他又补充到：&lt;span style=&#34;color: #555;&#34; &gt;“准确的说是大多数程序。我只编写有价值的程序，我不会在琐事上浪费时间。有很多程序我没写过，虽然它们对我来说不费吹灰之力。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“那么，你能帮助我完善我的程序吗？”&lt;/span&gt;小 &lt;strong&gt;Printf&lt;/strong&gt; 问道，接着小 &lt;strong&gt;Printf&lt;/strong&gt; 开始阐述他的网站系统，但骄傲的程序猿打断了他：&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“对不起，我觉得你的网站没有任何意义。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“为什么？”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“经验。我擅长开发我开发的东西，我也只在我擅长的领域做开发。我确保我的领域永远有价值。这叫工作保障，也叫适者生存，这就是我的风格。我只专注于我的领域！”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“所以你为什么不愿意帮我呢？”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“Emm…你看，如果我花时间帮助了你，意味着我也要花时间帮助别人，而不是提高我自己——这对我来说不是个好主意。我的建议是：求人不如求己。这样可以磨练你的品质。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“你说的方法好像不是很高效……”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“你可以去学校学习，或者自学。这种方法可以淘汰那些懒惰的，只喜欢简单的人。只有真正渴望知识的人才能成功！如果我纵容了伸手党，我所创造的作品的价值也会随之降低。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“你认为团队合作或者同事不能帮助你吗？”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“是的。我喜欢独处，没有任何让我分心的事。每次让我和团队合作的时候，都不是什么好的经历。解决问题的最好的方法就是把他们的代码拿过来重写。然后程序就能够运行了。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;小 &lt;strong&gt;Printf&lt;/strong&gt; 对这样一位专家感到十分惊讶，他表面上无私的帮助别人 (重构代码)，但却嫌弃别人技术差。更可悲的是，这个男人眼界十分狭隘，他只关心与自己相关的领域，只活在自己的世界里。&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“我明白了…很庆幸你没有帮助我”&lt;/span&gt;，小 &lt;strong&gt;Printf&lt;/strong&gt; 说道。&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“你什么意思？”&lt;/span&gt;傲慢的专家问道，好似自己的权威受到了威胁。&lt;span style=&#34;color: #555;&#34; &gt;“你在质疑我的能力？”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“这道没有。看起来你只是把我视为累赘和包袱，我是来寻求帮助的，不是来找骂的。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;小 &lt;strong&gt;Printf&lt;/strong&gt; 飞快的跑出了专家的办公室。骄傲的专家依然心安理得的做起了自己领域的权威。&lt;/p&gt;

&lt;h2 id=&#34;第五章&#34;&gt;第五章&lt;/h2&gt;

&lt;p&gt;&lt;img alt=&#34;a man surrounded by thick hardcover books&#34; src=&#34;https://mogeko.github.io/images/043/books.png&#34; &gt;&lt;/p&gt;

&lt;p&gt;然后，小 &lt;strong&gt;Printf&lt;/strong&gt; 来到了另一间办公室。里面有一个男人，他的周围都是厚厚的精装书籍。书上印着奇异的图像，如 Wizards、 Dragons、分形、数学模式……&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“先生，好多书啊！”&lt;/span&gt;小 &lt;strong&gt;Printf&lt;/strong&gt; 说道。&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“谢谢，这些都是程序员必看的书，没看过这些，你就不是一个真正的专业人士。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“我想我还差得远呢”&lt;/span&gt;小 &lt;strong&gt;Printf&lt;/strong&gt; 说道。&lt;span style=&#34;color: #555;&#34; &gt;“哪一本是你的最爱呢？”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“哦，这些书的大部分我都还没怎么读过。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“那你现在是大佬吗？”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“不，我不是”&lt;/span&gt;这个程序猿骄傲补充到：&lt;span style=&#34;color: #555;&#34; &gt;“我想我应该是一个很垃圾的程序猿。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“这有什么好值得骄傲的”&lt;/span&gt;，小 &lt;strong&gt;Printf&lt;/strong&gt; 说。&lt;span style=&#34;color: #555;&#34; &gt;“我感觉我的技术变得越来越好了。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“你听过 &lt;em&gt;达克效应&lt;/em&gt; 吗？”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“那是什么？”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“这是一种认知偏见。简单的说，能力高的人总是低估自己，而能力菜的人总是高估自己。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“也就是说，如果我认为自己在变强，其实自己并没有在变强？”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“是的。你甚至可能原地踏步，或者更糟。另一方面，我宣称自己是个很菜的程序猿，但根据 *达克效应*，我是低估了自己，所以我其实是一个大佬。你怎么看？”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“额……我？”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“这也是为什么程序猿都喜欢自嘲。当你认为自己足够好了，你就放松了，也就没有前进的动力了。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“那是不是说你对自己感觉良好，实际上你正走向失败；你应该时刻感觉自己还不够好？”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“是的。不过，你虽然明白了自己的不足，但并没有提出任何解决方案。这让你看起来很聪明，但并没有什么卵用。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“你的意思是？”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“比方说我在网上看到了一个我不喜欢的项目。我留言说项目一无是处，但又不明确指出哪里不好。最后你还可以说这个项目的作者简直是个傻逼，应该从这里滚出去 (大概是‘滚出 GitHub’之类的意思)。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“但是这样做又什么好处呢？”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“我想让他们知道他们很垃圾，但又不明确指出来他们哪里做的不对。这就显得我比较厉害。然而他们毫无头绪，不知道自己做错了什么。哇咔咔咔～～”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“那如果别人请教你问题，你又正好不知道呢？”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“这种情况你就说道处都是问题，还有很多东西需要优化，总之就是转移话题。让他们感到绝望，最后还是要靠自己来解决问题。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“所以这就是你的立场？这是你的一贯作风？你会的问题装作对此无能为力，使得真正无法解决这个问题的人抓狂；你不会的问题又装作很了解，使得别人根据你的建议改善其它的地方，而与真理相行渐远，浪费时间。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“很多情况下，才能不是最重要的，口碑才是。老板只会雇佣自己喜欢的人，不被喜欢的人和无关紧要的人会第一个被炒鱿鱼。要不就改变环境，改不了就要适应，适应不了就被淘汰。这就是‘社会’。企业中就是这样，学术届没准也是。做这行，你认识谁，学会推销自己，建立自己的声望。这样你才能在企业里站住脚。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“如果在企业中工作是这么恶心，要给别人&amp;rsquo;使绊&amp;rsquo;。那么我还真不想在这种环境下工作！”&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&#34;第六章&#34;&gt;第六章&lt;/h2&gt;

&lt;p&gt;&lt;img alt=&#34;realprog&#34; src=&#34;https://mogeko.github.io/images/043/realprog.png&#34; &gt;&lt;/p&gt;

&lt;p&gt;在午休期间，小 &lt;strong&gt;Printf&lt;/strong&gt; 遇到了一个忘记吃饭的人。他桌子上的三明治已经完全凉掉了，但他还是盯着屏幕。&lt;/p&gt;

&lt;p&gt;他好像十分的忙，但没人知道他在做什么。小 &lt;strong&gt;Printf&lt;/strong&gt; 问：&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“如果主数据库挂掉了，从数据库也会挂掉吗？”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“你跑到所以程序&lt;span style=&#34;color: #555;&#34; &gt;“，这个人说，”&lt;/span&gt;早晚都要挂掉。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“你以往的经验告诉你的？”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“是的，不仅如此。所有的大型系统都处在部分故障的状态”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“那么，人们依然试图建立最可靠的系统，这又有用呢？”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;那个人没有回答，而是忙着做自己的事情。&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“那么，人们依然试图建立最可靠的系统，这又有用呢？”&lt;/span&gt;小 &lt;strong&gt;Printf&lt;/strong&gt; 又问了一遍。&lt;/p&gt;

&lt;p&gt;这个人在忙于自己的事，而小 &lt;strong&gt;Printf&lt;/strong&gt; 一直问个不停，并且他还没有吃午饭。&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“完全没用！无论如何，程序都 TM 是一坨屎！”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;小 &lt;strong&gt;Printf&lt;/strong&gt; 倒吸了一口气，半天说不出一句话。&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;trashcan&#34; src=&#34;https://mogeko.github.io/images/043/trashcan.png&#34; &gt;&lt;/p&gt;

&lt;p&gt;小 &lt;strong&gt;Printf&lt;/strong&gt; 回应到，声音中透露这一丝不满：&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“我不相信你。程序确实很脆弱，但程序猿可以作出努力，增强程序的鲁棒性，让事情变得更好。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;没人回答。那人正翻阅文档，准备重启一个新的集群，不过这似乎会让事情变得更糟。&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“并且你应该相信又好的，可靠的程序…”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“不可能！”&lt;/span&gt;那人粗鲁的打断了 &lt;strong&gt;Printf&lt;/strong&gt;，接着说道：&lt;span style=&#34;color: #555;&#34; &gt;“我不相信有可靠或者好的的程序！根本不可能！我从一开始就知道。我正在处理一个垃圾的系统，你没看见我想方设法地让这个狗东西跑起来时焦头烂额的样子吗？事实如此！”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Printf&lt;/strong&gt; 楞了一下，表情震惊。&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“事实如此？说得好像自己是个专家一样！”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Printf&lt;/strong&gt; 接着说：&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“是你自己把这一起搞砸的。这世界上有数百万个久经考验的程序，多年来它们一直在运行，它们也有 bug，也崩溃过。但人们还是在改进它们，使用它们。据我所知，很多程序本身是没有问题的。真正的问题出在计算机和椅子之间——糟糕的环境配置、错误的操作。你不认为这才是问题所在吗？”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;那人听完哑口无言。&lt;/p&gt;

&lt;h2 id=&#34;第七章&#34;&gt;第七章&lt;/h2&gt;

&lt;p&gt;&lt;img alt=&#34;frameworks&#34; src=&#34;https://mogeko.github.io/images/043/frameworks.png&#34; &gt;&lt;/p&gt;

&lt;p&gt;小 &lt;strong&gt;Printf&lt;/strong&gt; 拜访的第四个工作区有一个男人，他的电脑被很多标签纸所覆盖，以至于看不出来电脑的品牌。&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“motor-mvc, quadrangular JS, GoQuery, cometeor, some japanese soundy thing, &amp;hellip;”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“Hi”&lt;/span&gt;，小 &lt;strong&gt;Printf&lt;/strong&gt; 打断了他的自言自语。&lt;span style=&#34;color: #555;&#34; &gt;“你在做什么？”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“alchemist, bongodb, mochascript, walktime.js, portasql, &amp;hellip;”&lt;/span&gt;，男人并没有理会 &lt;strong&gt;Printf&lt;/strong&gt; 继续自顾自的念着什么。&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“你在干什么？”&lt;/span&gt;小 &lt;strong&gt;Printf&lt;/strong&gt; 提高音量又问了一次。&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“哦，我正在尝试新的框架、工具、数据库还有编程语言。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“哇！你接触的这样东西都好新鲜啊！有的我听都没听说过。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“是的，这个行业的技术更新的速度非常快！&lt;span style=&#34;color: #555;&#34; &gt;“他看了眼手机，然后说道”&lt;/span&gt;看，&lt;em&gt;cardboard.io&lt;/em&gt; 框架又推出了3.5版本，它宣布不兼容3.4了。于此同时社区中已经有4个衍生版本了。我必须尝试所以的版本才能知道哪一个是最合适的！”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“但是你为什么要学会所有的版本呢？”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“我是最早的尝鲜者，如果你不保持更新技能树，还是用老掉牙的 COBOL 或者 MUMPS。你还想抓住成功的契机，抢占先机，占领下一个风口？”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“你成功预测过热门技术吗？”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“是的！我发现 Rails 的时候它还很小，我学会 Node.js 的时候它还没有流行。我是 Redis、MongoDB 和 Riak 的内测用户。我是第一批试用 Vagrant 的用户，然后我转去使用 Docker，但是现在我全身心的关注 Unikernels…”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“哇哦～你从这些前沿技术中学到了些什么？”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“额，并没有。当 Rails 壮大的时候，我就去关注另外的新鲜东西了。同样的，其他的几门技术我也是这样的。我现在把希望寄托在 Unikernels 上。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“那么…”&lt;/span&gt;，小 &lt;strong&gt;Printf&lt;/strong&gt; 沉默了一会儿。&lt;span style=&#34;color: #555;&#34; &gt;“你用这些框架解决了哪些问题？”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“我每次都确保不使用不成熟的东西，不能用公司做赌注。这一点十分重要，因为如果你使用最新的技术，你就可能招不到人，而不关注新的技术，有可能脱离时代的步伐。所以我们鼓励学习新的技术。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“Interesting 🤔”&lt;/span&gt; 小 &lt;strong&gt;Printf&lt;/strong&gt; 说道。&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“在这个飞速发展的世界中，如果你想参加这场游戏，你需要有先进的技术。否则你就会被时代淘汰，没有人想被时代淘汰。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;小 &lt;strong&gt;Printf&lt;/strong&gt; 打断到：&lt;span style=&#34;color: #555;&#34; &gt;“不，我不是这个意思，”&lt;/span&gt;然后他补充说&lt;span style=&#34;color: #555;&#34; &gt;“我的意思是说好的工具是用来解决问题的。但对你来说工具却成了问题。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;听完这些话，哪个人呆住了，小 &lt;strong&gt;Printf&lt;/strong&gt; 跳跃着离开了房间。&lt;/p&gt;

&lt;h2 id=&#34;第八章&#34;&gt;第八章&lt;/h2&gt;

&lt;p&gt;&lt;img alt=&#34;DevOps&#34; src=&#34;https://mogeko.github.io/images/043/ops.png&#34; &gt;&lt;/p&gt;

&lt;p&gt;在办公室里，坐着一位疲惫的员工。桌子上杂乱无章的摆放这很多空饮料 (咖啡) 瓶子，整个人窝在那里，疯狂的打字。&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“Hi”&lt;/span&gt;，小 &lt;strong&gt;Printf&lt;/strong&gt; 说。&lt;/p&gt;

&lt;p&gt;那个女人没有停下手中的工作，继续疯狂敲键盘。&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“Hello?”&lt;/span&gt;小 &lt;strong&gt;Printf&lt;/strong&gt; 再次打招呼。&lt;/p&gt;

&lt;p&gt;那女人终于停了下来，端起一杯饮料，喝了一口。&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“我有一份十分糟糕的工作”&lt;/span&gt;，她说。&lt;span style=&#34;color: #555;&#34; &gt;“我是一名 DevOps。刚开始我还挺喜欢这工作的，原来我大多数时间在开发，然后 debug，但随着时间的推移，这份工作变得越来越糟。bug 变得越来越多。我必须在规定时间内修复所有的 bug，创造奇迹。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“他们可以找人其他人来帮你啊？”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“没有，这就是问题所在。小的 bug 接连发生，因为我必须在规定时间内解决问题，所以我不能像以前一样小心翼翼，结果我制造了更多的 bug。我整天都忙于救火，我讨厌我的工作。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“为什么他们不雇更多的人来帮你呢？”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“因为我很擅长我的工作，而且我没办法确保每个人都能像我一样在规定时间内解决问题。当你创造的奇迹越来越多时，人们会习惯它，会认为这一切都是理所当然的。然后，当哪天你没有创造奇迹时，他们会认为你能力不够。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“真是个悲伤的故事”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“没错。因为你是最熟悉这些问题的人，你只能变得越来越累，直到老板招了一个新人顶替掉你的工作。如果你担心自己的其他人会因为你的工作遇到麻烦，那么你只能修复一个又一个的 bug，直到麻木。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“何其不幸”&lt;/span&gt;，小 &lt;strong&gt;Printf&lt;/strong&gt; 说道。&lt;/p&gt;

&lt;p&gt;她又被叫去工作了。&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“这位女士”&lt;/span&gt;，当她走远后，小 &lt;strong&gt;Printf&lt;/strong&gt; 自言自语到，&lt;span style=&#34;color: #555;&#34; &gt;“这位女士会被我原来遇见的那群人嘲笑：资深专家、愤世嫉俗的开发者、永远追求最新技术的人。但是她是唯一一个为别人着想的人。或与是因为，她认为一切事情还是亲力亲为的好。”&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&#34;第九章&#34;&gt;第九章&lt;/h2&gt;

&lt;p&gt;&lt;img alt=&#34;Architect&#34; src=&#34;https://mogeko.github.io/images/043/architect.png&#34; &gt;&lt;/p&gt;

&lt;p&gt;在大楼的一角，小 &lt;strong&gt;Printf&lt;/strong&gt; 找到了一间带有巨大落地窗的房间。其中坐着一位老绅士，桌子上摆放着大量文件。&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“啊，来了个小开发者”&lt;/span&gt;那男人惊呼，并邀请小 &lt;strong&gt;Printf&lt;/strong&gt; 进来。&lt;span style=&#34;color: #555;&#34; &gt;“进来吧！”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;小 &lt;strong&gt;Printf&lt;/strong&gt; 环顾四周的窗户，发现上面写满了东西。上面画了各种圆形，箭头，圆柱和云。虽然小 &lt;strong&gt;Printf&lt;/strong&gt; 搞不懂那个男人为什么要画这些图形，但透过这些‘云’可以看到天空上真正的云，非常有趣的组合。&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“这是什么？”&lt;/span&gt;，小 &lt;strong&gt;Printf&lt;/strong&gt; 指着窗户上的图形问道。&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“哦，这个？这是我们的线上系统！”&lt;/span&gt;那男人说道，随后介绍到。&lt;span style=&#34;color: #555;&#34; &gt;“我是一名软件架构师。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“什么是软件架构师？”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“总的来说，就是知道如何构建大型系统并且让系统中的每个部分都非常稳定的人。架构师必须了解数据库、编程语言、框架、编辑器、数据结构、协议以及封装、分布式等概念”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“太好了！”&lt;/span&gt;小 &lt;strong&gt;Printf&lt;/strong&gt; 说，&lt;span style=&#34;color: #555;&#34; &gt;“终于有人能回答我的所有问题了！”&lt;/span&gt;他憋了一眼玻璃上的加构图。&lt;span style=&#34;color: #555;&#34; &gt;“你的系统真大，它跑得快吗？”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“我也说不准”&lt;/span&gt;，架构师说道。&lt;span style=&#34;color: #555;&#34; &gt;“不过理论上跑得挺快的。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“那它的代码怎么样？鲁棒性高吗？”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“这个我没法回答你。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“用户喜欢这个系统吗？”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“这个我恐怕也没法回答你。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“但你是架构师啊！”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“没错！但我总归不是一线开发人员。架构师不关心模块、类、怎么整合库等问题。架构师的重要性不是体现在写代码上的，而是引导开发人员。如果开发人员遇到棘手的、无法解决的问题时，架构师才会接手。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“为什么呢？”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“因为我们经验丰富。我们了解系统的方方面面。然后，我们可以用我们的知识和经验指导开发人员开发出最棒的系统。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“但是你不参与一线开发，怎么知道开发是否顺利呢？”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“我们相信我们的工程师。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“所有你相信你的工程师能够正确的实现你的想法，那他们自己的想法呢？他们又机会提出自己的想法吗？”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;这个软件工程师楞了一下。&lt;span style=&#34;color: #555;&#34; &gt;“我想……”&lt;/span&gt;，他最终承认。&lt;span style=&#34;color: #555;&#34; &gt;“这确实是个问题，其实工作中很多提议没有被测试或者实验过……”&lt;/span&gt;他沉思了一会儿。&lt;span style=&#34;color: #555;&#34; &gt;“有时软件架构师既不做软件也不做架构。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;小 &lt;strong&gt;Printf&lt;/strong&gt; 离开了房间，离开了大楼。结束了他的旅行。&lt;/p&gt;

&lt;h2 id=&#34;第十章&#34;&gt;第十章&lt;/h2&gt;

&lt;p&gt;&lt;img alt=&#34;Charity&#34; src=&#34;https://mogeko.github.io/images/043/charity.png&#34; &gt;&lt;/p&gt;

&lt;p&gt;小 &lt;strong&gt;Printf&lt;/strong&gt; 走到外面，遇见了一个为慈善机构募集钱的男人。&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“你好”&lt;/span&gt;，那男人说道说道。&lt;span style=&#34;color: #555;&#34; &gt;“你愿意帮助一些需要帮助的人吗？”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“那样可能会让我感到好受些”&lt;/span&gt;，小 &lt;strong&gt;Printf&lt;/strong&gt; 说。&lt;span style=&#34;color: #555;&#34; &gt;“我去那栋楼里寻求帮助，待了一天。结果现在，我比以前更加困惑了。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“啊，我明白了。哪些开发者，他们没有真正的帮到你？他们喜欢说‘程序猿改变世界’，虽然他们确实做到了。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“那为何我仍会感到困惑呢？”&lt;/span&gt;小 &lt;strong&gt;Printf&lt;/strong&gt; 问道。&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“因为他们最擅长的事情帮助人们是将复杂的工作变为程序，使人们的工作生活变得更加的轻松。软件正蚕食着这个世界，使世界 (看起来) 革新换面……但本质上仍然是那个原来的世界。技术并不能将所有事情都变好。我们仍有些根深蒂固的问题。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“那我应该怎么做？”&lt;/span&gt;小 &lt;strong&gt;Printf&lt;/strong&gt; 显得很焦虑。&lt;/p&gt;

&lt;p&gt;那个男人想了一会儿，然后提出小 &lt;strong&gt;Printf&lt;/strong&gt; 可以来帮助他一起为需要帮助的人提供帮助，他觉得这样可以让小 &lt;strong&gt;Printf&lt;/strong&gt; 好受一点。下午，小 &lt;strong&gt;Printf&lt;/strong&gt; 讲述了他的问题以及他的遭遇。这个男人沉默了一段时间，然后说道：&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“在这场游戏中，他们追逐声誉，他们从解决错综复杂的问题中获得短暂的愉悦 (成就感)。但最终，如果你仅仅是为了解决问题而解决问题，忽略了‘以人为本’，那么你永远也无法获得真正的满足。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“这可能不是个问题，也可能是一个问题。随着你的成长，你需要在工作生活中得到点什么，它可以是钱，也可以是兴趣爱好，这都不是重点。重点是你必须设法在生活中获得满足感。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“最后，当你解决了人类真正面临的问题的时候，你会觉得真正的满足！即使不使用计算机。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“你在你的程序上花费了大量心血，(对你来说) 你的程序因此变得重要”&lt;/span&gt;，男人补充到，&lt;span style=&#34;color: #555;&#34; &gt;“但如果你忘记了当初为什么要设计怎么一个系统，而只是将它作为炫技的游戏。这才是最可悲的。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“程序猿经常会忘记这样一个事实；如果你忘记了自己的初衷，那么你在程序上花费再多的时间都是没有意义的。而最有效的解决方法是*‘忘记’*问题本身，因为这才是问题所在。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #555;&#34; &gt;“只有在解决人们真正面对的问题的时候，才能获得真正的满足！”&lt;/span&gt;，小 &lt;strong&gt;Printf&lt;/strong&gt; 不断重复这句话，想要印在脑子里。&lt;/p&gt;

&lt;h2 id=&#34;第十一章&#34;&gt;第十一章&lt;/h2&gt;

&lt;p&gt;&lt;img alt=&#34;End&#34; src=&#34;https://mogeko.github.io/images/043/printf-end.png&#34; &gt;&lt;/p&gt;

&lt;p&gt;现在小 &lt;strong&gt;Printf&lt;/strong&gt; 正坐在我的面前。与他聊天让我开始认真思考，我为什么要走上编程的道路？&lt;strong&gt;Printf&lt;/strong&gt; 遇到的每一个人都是我今后可能成为的那个。我曾被他们鼓励成为他们中的一员，将来也有可能鼓励其他人也这样做。&lt;/p&gt;

&lt;p&gt;我被拖进一个名为“成为真正程序猿”的游戏中，小 &lt;strong&gt;Printf&lt;/strong&gt; 没有。他说相比与成为一个“真正的程序猿”，他更想成为一个真正为人类解决问题的程序猿。&lt;/p&gt;

&lt;p&gt;我呆坐在这里，回顾我的整个编程生涯，我想弄清：成为解决真正问题的程序猿；还是一个为了完成工作而工作的程序猿。这两者是完全不同的。&lt;/p&gt;

&lt;p&gt;不管怎么样，小 &lt;strong&gt;Printf&lt;/strong&gt; 认为他不需要成为一个“真正的程序员”。现在，我也是这样认为。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rust 中的所有权</title>
      <link>https://mogeko.me/2019/042/</link>
      <pubDate>Wed, 16 Jan 2019 18:57:36 +0800</pubDate>
      
      <guid>https://mogeko.me/2019/042/</guid>
      <description>

&lt;!-- 
&lt;img alt=&#34;&#34; src=&#34;https://mogeko.github.io/images/042/&#34; &gt;
&lt;span class=&#34;spoiler&#34; &gt;&lt;/span&gt;
&amp;emsp;&amp;emsp;
 --&gt;

&lt;p&gt;&lt;strong&gt;所有权&lt;/strong&gt;是 Rust 中最重要的概念之一，也是 Rust 与 C++、Java 等“别的语言”最大的区别之一。&lt;/p&gt;

&lt;p&gt;规定所有权规则是为了解决一个困扰了学界多年的难题：&lt;strong&gt;如何高效的管理内存？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;每一个运行的程序都必须管理它使用的内存。有的语言让程序猿自己管理程序使用的内存 (比如：C 语言)。有的语言通过垃圾回收 (&lt;em&gt;Garbage Collection, GC&lt;/em&gt;) 来自动的管理内存 (比如：Java)。它们各自有各自的有点，同时又有各自的缺点——GC 可以自动回收程序不需要的内存，可以降低程序员的心智负担，但运行 GC 会暂停程序的运行，虽然时间很短，但对于某些对时间特别敏感的程序 (比如交易股票、期货的程序) 来说是不可接受的。那么手动管理内存呢？确实，手动管理内存不会暂停程序的执行，但是如果忘记回收了会浪费内存；如果过早回收了，将会出现无效变量；如果重复回收，这也是个 bug；这无疑会对程序的运行带来不确定性。所有权规则就是为了让程序不暂停同时让内存被正确释放的而制定的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;先说结论：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rust 中的每一个值都有一个被称为其 &lt;strong&gt;所有者 (owner)&lt;/strong&gt; 的变量。&lt;/li&gt;
&lt;li&gt;值有且只有一个所有者。&lt;/li&gt;
&lt;li&gt;当所有者（变量）离开作用域，这个值将被丢弃。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;那么究竟谁才是程序的所有者呢？&lt;/p&gt;

&lt;p&gt;让我们举个栗子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn main () {
    let s1 = &amp;quot;hello&amp;quot;; // 从这里开始 s1 是有效的，但 s2 是无效的
	{
    	let s2 = String::from(&amp;quot;world&amp;quot;); // 从这里开始 s1 和 s2 都是有效的
	} // s2 离开了它的作用域，被丢弃；但 s1 仍然是有效的
} // s1 离开了它的作用域，被丢弃；程序结束
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对 &lt;code&gt;s1&lt;/code&gt; 来说，整个 &lt;code&gt;main&lt;/code&gt; 函数都是它的作用域，它的所有者就是 &lt;code&gt;main&lt;/code&gt;。而 &lt;code&gt;s2&lt;/code&gt; 的作用域在 &lt;code&gt;{}&lt;/code&gt; 之间，所以它的所有者是 &lt;code&gt;{}&lt;/code&gt;。也就是说如果在 &lt;code&gt;{}&lt;/code&gt; 后使用 &lt;code&gt;s1&lt;/code&gt; 是合法的，但使用 &lt;code&gt;s2&lt;/code&gt; 就会报错，因为 &lt;code&gt;s2&lt;/code&gt; 离开了它的作用域，已经被丢弃了。&lt;/p&gt;

&lt;p&gt;好像挺好理解的，那么它又是如何影响程序对内存的管理的呢？&lt;/p&gt;

&lt;h2 id=&#34;内存与分配&#34;&gt;内存与分配&lt;/h2&gt;

&lt;p&gt;首先我们要了解以下程序是如何使用内存的。&lt;/p&gt;

&lt;p&gt;Rust 对内存有两种使用方式：&lt;strong&gt;栈 (Stack)&lt;/strong&gt;和&lt;strong&gt;堆 (Heap)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;栈的特点是&lt;strong&gt;先进后出&lt;/strong&gt;，也就是说先&lt;strong&gt;入栈&lt;/strong&gt;的数据会最后&lt;strong&gt;出栈&lt;/strong&gt;。并且栈中数据的大小的确定的。这些特点使得栈的操作速度非常的快。所以栈被用来存放整型、浮点型等长度固定的数据类型。&lt;/p&gt;

&lt;p&gt;访问堆上的数据就要比访问栈上的数据要慢上不少。因为堆上的数据大小是不固定的，并且必须通过指针来访问。现代处理器在内存 (缓存) 中跳转越少就越快。因此堆一般用来存放那些大小未知或者大小可能发生变化的数据类型。&lt;/p&gt;

&lt;h2 id=&#34;所有权的交互方式&#34;&gt;所有权的交互方式&lt;/h2&gt;

&lt;h3 id=&#34;移动&#34;&gt;移动&lt;/h3&gt;

&lt;p&gt;让我们来看看这么一个栗子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let s1 = String::from(&amp;quot;hello&amp;quot;);
let s2 = s1;

println!(&amp;quot;{}, world!&amp;quot;, s1);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;按照正常是思路程序应该会打印出 &lt;code&gt;hello, world!&lt;/code&gt;。因为我们让 &lt;code&gt;s2&lt;/code&gt; 拷贝了 &lt;code&gt;s1&lt;/code&gt; 的指针，就像这样：&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;RAM&#34; src=&#34;https://doc.rust-lang.org/book/img/trpl04-02.svg&#34; style=&#34;width:400px&#34;&gt;&lt;/p&gt;

&lt;p&gt;但事实上程序会报错！因为 &lt;code&gt;s1&lt;/code&gt; 中的指针&lt;strong&gt;移动&lt;/strong&gt;到了 &lt;code&gt;s2&lt;/code&gt; 中而并非拷贝，就像这样：&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;RAM&#34; src=&#34;https://doc.rust-lang.org/book/img/trpl04-04.svg&#34; style=&#34;width:400px&#34;&gt;&lt;/p&gt;

&lt;p&gt;在解释为什么之前先让我们来假设一下 &lt;code&gt;s1&lt;/code&gt; 中的指针被拷贝到了 &lt;code&gt;s2&lt;/code&gt; 中。那么就有两个指针同时指向了 &lt;code&gt;String&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;RAM&#34; src=&#34;https://doc.rust-lang.org/book/img/trpl04-02.svg&#34; style=&#34;width:400px&#34;&gt;&lt;/p&gt;

&lt;p&gt;然后在离开作用域时，&lt;code&gt;s1&lt;/code&gt; 和 &lt;code&gt;s2&lt;/code&gt; 指向的对象 (也就是 &lt;code&gt;String&lt;/code&gt;) 被依次释放掉。注意到了吗？&lt;code&gt;String&lt;/code&gt; 被释放了两次！这是一个叫做 &lt;strong&gt;二次释放&lt;/strong&gt; (&lt;em&gt;double free&lt;/em&gt;) 的错误，也是之前提到过的内存安全性 bug 之一。两次释放 (相同) 内存会导致内存污染，它可能会导致潜在的安全漏洞。&lt;/p&gt;

&lt;p&gt;为了避免这一错误，Rust 好在将 &lt;code&gt;s1&lt;/code&gt; 中的指针赋值给 &lt;code&gt;s2&lt;/code&gt; 的同时抛弃掉 &lt;code&gt;s1&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;RAM&#34; src=&#34;https://doc.rust-lang.org/book/img/trpl04-04.svg&#34; style=&#34;width:400px&#34;&gt;&lt;/p&gt;

&lt;p&gt;这也印证了&lt;strong&gt;“值有且只有一个所有者”&lt;/strong&gt;这一规则。&lt;/p&gt;

&lt;h3 id=&#34;克隆&#34;&gt;克隆&lt;/h3&gt;

&lt;p&gt;如果想在将 &lt;code&gt;s1&lt;/code&gt; 中的指针赋值给 &lt;code&gt;s2&lt;/code&gt; 后仍然使用 &lt;code&gt;s1&lt;/code&gt;，可以使用 &lt;code&gt;clone&lt;/code&gt; 方法。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let s1 = String::from(&amp;quot;hello&amp;quot;);
let s2 = s1.clone();

println!(&amp;quot;s1 = {}, s2 = {}&amp;quot;, s1, s2);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以正常运行，堆上的数据确实被&lt;strong&gt;复制&lt;/strong&gt;了，但所有权并没有发生&lt;strong&gt;移动&lt;/strong&gt;。此时的内存大概是这个样子：&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;RAM&#34; src=&#34;https://doc.rust-lang.org/book/img/trpl04-03.svg&#34; style=&#34;width:400px&#34;&gt;&lt;/p&gt;

&lt;h3 id=&#34;拷贝&#34;&gt;拷贝&lt;/h3&gt;

&lt;p&gt;让我们来执行一下以下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let x = 5;
let y = x;

println!(&amp;quot;x = {}, y = {}&amp;quot;, x, y);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这段代码能够运行，并且没有使用 &lt;code&gt;clone&lt;/code&gt; 方法。这似乎和我们刚学到的有点矛盾。&lt;/p&gt;

&lt;p&gt;原因是像整型这样的在编译时已知大小的类型被整个存储在栈上，所以拷贝其实际的值是快速的。所以 &lt;code&gt;x&lt;/code&gt; 的值直接被复制给了 &lt;code&gt;y&lt;/code&gt;，相当于默认使用了 &lt;code&gt;clone&lt;/code&gt; 方法。&lt;/p&gt;

&lt;p&gt;相似的数据类型还有：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;所有整数类型，比如 u32。&lt;/li&gt;
&lt;li&gt;布尔类型，bool，它的值是 true 和 false。&lt;/li&gt;
&lt;li&gt;所有浮点数类型，比如 f64。&lt;/li&gt;
&lt;li&gt;字符类型，char。&lt;/li&gt;
&lt;li&gt;元组，当且仅当其包含的类型也都是 Copy 的时候。比如，(i32, i32) 是 Copy 的，但 (i32, String) 就不是。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;所有权与函数&#34;&gt;所有权与函数&lt;/h3&gt;

&lt;p&gt;与赋值类似，函数的参数与返回值也&lt;strong&gt;可能&lt;/strong&gt;发生所有权的转移。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn main() {
    let s1 = gives_ownership();         // gives_ownership 将返回值移给 s1

    let s2 = String::from(&amp;quot;hello&amp;quot;);     // s2 进入作用域

    let s3 = takes_and_gives_back(s2);  // s2 被移动到 takes_and_gives_back 中, 
                                        // 它也将返回值移给 s3
} // 这里, s3 移出作用域并被丢弃。s2 也移出作用域，但已被移走，
  // 所以什么也不会发生。s1 移出作用域并被丢弃

fn gives_ownership() -&amp;gt; String {             // gives_ownership 将返回值移动给
                                             // 调用它的函数

    let some_string = String::from(&amp;quot;hello&amp;quot;); // some_string 进入作用域.

    some_string                              // 返回 some_string 并移出给调用的函数
}

// takes_and_gives_back 将传入字符串并返回该值
fn takes_and_gives_back(a_string: String) -&amp;gt; String { // a_string 进入作用域

    a_string  // 返回 a_string 并移出给调用的函数
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;使用值但不获得所有权&#34;&gt;使用值但不获得所有权&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;引用&lt;/strong&gt;允许你使用值但不获取其所有权&lt;/p&gt;

&lt;p&gt;我们将获取引用作为函数参数称为&lt;strong&gt;借用&lt;/strong&gt; (borrowing)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn main() {
    let s1 = String::from(&amp;quot;hello&amp;quot;);

    let len = calculate_length(&amp;amp;s1);

    println!(&amp;quot;The length of &#39;{}&#39; is {}.&amp;quot;, s1, len);
}

fn calculate_length(s: &amp;amp;String) -&amp;gt; usize { // s 是对 String 的引用
    s.len()
} // 这里，s 离开了作用域。但因为它并不拥有引用值的所有权，
  // 所以什么也不会发生
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;详情：&lt;a href=&#34;https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;The Rust Programming Language::References and Borrowing&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;结束了-不-仅仅是开始&#34;&gt;结束了？不！仅仅是开始…&lt;/h2&gt;

&lt;p&gt;Rust 中关于所有权还有很多重要的概念，比如生命周期 (&lt;em&gt;lifetime&lt;/em&gt;) 等…&lt;/p&gt;

&lt;p&gt;所以我才说 Rust 中的所有权既是重点，也是难点。&lt;/p&gt;

&lt;p&gt;受限于篇幅，就不一一介绍了，更多细节可以参考：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;The Rust Programming Language::Validating References with Lifetimes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://doc.rust-lang.org/book/ch19-02-advanced-lifetimes.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;The Rust Programming Language::Advanced Lifetimes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;相关文章&#34;&gt;相关文章&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mogeko.github.io/2019/050/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Rust 中的生命周期&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mogeko.github.io/2019/051/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Rust 生命周期中的一些坑&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;说明&#34;&gt;说明&lt;/h2&gt;

&lt;p&gt;这篇文章是在学习完 &lt;a href=&#34;https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;The Rust Programming Language::What Is Ownership?&lt;/a&gt; 后写的，目的是巩固知识&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;看懂了不一定是真懂了，讲出来让别人听懂才是真懂了&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;内容可能与原教材原文有雷同的地方。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;顺便安利一下这本书：&lt;a href=&#34;https://doc.rust-lang.org/book/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;The Rust Programming Language&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这是 Rust 的官方教材，写得十分详细。现在已经很难买到这样的书 (更何况这还是免费的)&lt;/p&gt;

&lt;p&gt;如果觉得英语啃得恼火也可以看 &lt;a href=&#34;https://github.com/KaiserY&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;KaiserY&lt;/a&gt; 大佬翻译的版本：&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Rust 程序设计语言 简体中文版&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>描边灯塔插画</title>
      <link>https://mogeko.me/2018/041/</link>
      <pubDate>Fri, 28 Dec 2018 02:58:34 +0800</pubDate>
      
      <guid>https://mogeko.me/2018/041/</guid>
      <description>

&lt;!-- 
&lt;img alt=&#34;&#34; src=&#34;https://mogeko.github.io/images/041/&#34; &gt;
&lt;span class=&#34;spoiler&#34; &gt;&lt;/span&gt;
&amp;emsp;&amp;emsp;
 --&gt;

&lt;p&gt;&lt;img src=&#34;https://mogeko.github.io/images/041/Lighthouse.svg&#34; alt=&#34;描边灯塔插画&#34; /&gt;&lt;/p&gt;

&lt;p&gt;原图：&lt;a href=&#34;https://mogeko.github.io/images/041/Lighthouse.ai&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Lighthouse.ai&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;以下是使用到的颜色&#34;&gt;以下是使用到的颜色&lt;/h2&gt;

&lt;p&gt;据说&lt;a href=&#34;javascript:void(0);&#34; class=&#34;theme-switch&#34;&gt;黑暗模式&lt;/a&gt;下体验更佳哦  |・ω・｀)&lt;/p&gt;

&lt;div style=&#34;display:flex;&#34;&gt;
    &lt;b style=&#34;width:74px;display:inline-block&#34;&gt;边线：&lt;/b&gt;
    &lt;div style=&#34;-webkit-flex:1;flex:1;&#34;&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#313C85;&#34;&gt;▉ #313C85&lt;/span&gt;
        &lt;span style=&#34;display:inline-block;color:#ffffff&#34;&gt;结果关灯后又看不清 #313C85 了&lt;/span&gt;
        &lt;span style=&#34;display:inline-block;color:#ffffff&#34;&gt;_(:з」∠)_&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div style=&#34;display:flex;&#34;&gt;
    &lt;b style=&#34;width:74px;display:inline-block&#34;&gt;底座：&lt;/b&gt;
    &lt;div style=&#34;-webkit-flex:1;flex:1;&#34;&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#9497A6;&#34;&gt;▉ #9497A6&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#74808D;&#34;&gt;▉ #74808D&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#EB9558;&#34;&gt;▉ #EB9558&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#7E808D;&#34;&gt;▉ #7E808D&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#DBDBCE;&#34;&gt;▉ #DBDBCE&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#77D9AC;&#34;&gt;▉ #77D9AC&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#B9BBC5;&#34;&gt;▉ #B9BBC5&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#878997;&#34;&gt;▉ #878997&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div style=&#34;display:flex;&#34;&gt;
    &lt;b style=&#34;width:74px;display:inline-block&#34;&gt;灯塔下部：&lt;/b&gt;
    &lt;div style=&#34;-webkit-flex:1;flex:1;&#34;&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#EB9558&#34;&gt;▉ #EB9558&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#DBDBCE&#34;&gt;▉ #DBDBCE&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#E6E7EB&#34;&gt;▉ #E6E7EB&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#FF5266&#34;&gt;▉ #FF5266&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#FFDE38&#34;&gt;▉ #FFDE38&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#F2F2EE&#34;&gt;▉ #F2F2EE&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#C87F4B&#34;&gt;▉ #C87F4B&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#BABAAF&#34;&gt;▉ #BABAAF&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div style=&#34;display:flex;&#34;&gt;
    &lt;b style=&#34;width:74px;display:inline-block&#34;&gt;瞭望台：&lt;/b&gt;
    &lt;div style=&#34;-webkit-flex:1;flex:1;&#34;&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#E6E7EB&#34;&gt;▉ #E6E7EB&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#FFDE38&#34;&gt;▉ #FFDE38&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#FFF8CC&#34;&gt;▉ #FFF8CC&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#CACBCE&#34;&gt;▉ #CACBCE&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div style=&#34;display:flex;&#34;&gt;
    &lt;b style=&#34;width:74px;display:inline-block&#34;&gt;背景：&lt;/b&gt;
    &lt;div style=&#34;-webkit-flex:1;flex:1;&#34;&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#F5F7F9&#34;&gt;▉ #F5F7F9&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#FFE087&#34;&gt;▉ #FFE087&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#FFF5B3&#34;&gt;▉ #FFF5B3&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;然后以下是画图的具体步骤&#34;&gt;然后以下是画图的具体步骤&lt;/h2&gt;

&lt;p&gt;来源：&lt;a href=&#34;https://www.zcool.com.cn/article/ZODQwOTYw.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;【零基础学Ai教程】描边灯塔插图&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;作者：&lt;a href=&#34;https://www.zcool.com.cn/u/14824754&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Ai肖博士&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;000&#34; src=&#34;https://mogeko.github.io/images/041/000.jpg&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;001&#34; src=&#34;https://mogeko.github.io/images/041/001.jpg&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;002&#34; src=&#34;https://mogeko.github.io/images/041/002.jpg&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;003&#34; src=&#34;https://mogeko.github.io/images/041/003.jpg&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;004&#34; src=&#34;https://mogeko.github.io/images/041/004.jpg&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;005&#34; src=&#34;https://mogeko.github.io/images/041/005.jpg&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;006&#34; src=&#34;https://mogeko.github.io/images/041/006.jpg&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;007&#34; src=&#34;https://mogeko.github.io/images/041/007.jpg&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;008&#34; src=&#34;https://mogeko.github.io/images/041/008.jpg&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;009&#34; src=&#34;https://mogeko.github.io/images/041/009.jpg&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;010&#34; src=&#34;https://mogeko.github.io/images/041/010.jpg&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;011&#34; src=&#34;https://mogeko.github.io/images/041/011.jpg&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>描边城市插画</title>
      <link>https://mogeko.me/2018/040/</link>
      <pubDate>Thu, 27 Dec 2018 17:26:33 +0800</pubDate>
      
      <guid>https://mogeko.me/2018/040/</guid>
      <description>

&lt;!-- 
&lt;img alt=&#34;&#34; src=&#34;https://mogeko.github.io/images/040/&#34; &gt;
&lt;span class=&#34;spoiler&#34; &gt;&lt;/span&gt;
&amp;emsp;&amp;emsp;
 --&gt;

&lt;p&gt;上课时候摸鱼画的 |・ω・｀)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://mogeko.github.io/images/040/INDIA.svg&#34; alt=&#34;描边城市插画&#34; /&gt;&lt;/p&gt;

&lt;p&gt;虽然画得很丑但还是恬不知耻的想把原图贴出来 (*/ω＼*)：&lt;a href=&#34;https://mogeko.github.io/images/040/INDIA.ai&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;INDIA.ai&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;以下是使用到的颜色&#34;&gt;以下是使用到的颜色&lt;/h2&gt;

&lt;p&gt;据说&lt;a href=&#34;javascript:void(0);&#34; class=&#34;theme-switch&#34;&gt;黑暗模式&lt;/a&gt;下体验更佳哦  |・ω・｀)&lt;/p&gt;

&lt;div style=&#34;display:flex;&#34;&gt;
    &lt;b  style=&#34;width:60px;display:inline-block;&#34;&gt;边线：&lt;/b&gt;
    &lt;div style=&#34;-webkit-flex:1;flex:1;&#34;&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#5F4A57&#34;&gt;▉ #5F4A57&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div style=&#34;display:flex;&#34;&gt;
    &lt;b  style=&#34;width:60px;display:inline-block;&#34;&gt;地面：&lt;/b&gt;
    &lt;div style=&#34;-webkit-flex:1;flex:1;&#34;&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#CDB7AA&#34;&gt;▉ #CDB7AA&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#BFA18E&#34;&gt;▉ #BFA18E&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div style=&#34;display:flex;&#34;&gt;
    &lt;b  style=&#34;width:60px;display:inline-block;&#34;&gt;建筑①：&lt;/b&gt;
    &lt;div style=&#34;-webkit-flex:1;flex:1;&#34;&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#FF6873&#34;&gt;▉ #FF6873&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#FF678B&#34;&gt;▉ #FF678B&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#FF878B&#34;&gt;▉ #FF878B&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div style=&#34;display:flex;&#34;&gt;
    &lt;b  style=&#34;width:60px;display:inline-block;&#34;&gt;建筑②：&lt;/b&gt;
    &lt;div style=&#34;-webkit-flex:1;flex:1;&#34;&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#FFBE80&#34;&gt;▉ #FFBE80&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#FB9C6E&#34;&gt;▉ #FB9C6E&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#FDD5AB&#34;&gt;▉ #FDD5AB&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div style=&#34;display:flex;&#34;&gt;
    &lt;b  style=&#34;width:60px;display:inline-block;&#34;&gt;建筑③：&lt;/b&gt;
    &lt;div style=&#34;-webkit-flex:1;flex:1;&#34;&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#E1584E&#34;&gt;▉ #E1584E&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#7CC9F0&#34;&gt;▉ #7CC9F0&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#FFA263&#34;&gt;▉ #FFA263&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#FDB967&#34;&gt;▉ #FDB967&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#ED6E65&#34;&gt;▉ #ED6E65&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#A5D9F4&#34;&gt;▉ #A5D9F4&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#51B2E8&#34;&gt;▉ #51B2E8&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div style=&#34;display:flex;&#34;&gt;
    &lt;b  style=&#34;width:60px;display:inline-block;&#34;&gt;建筑④：&lt;/b&gt;
    &lt;div style=&#34;-webkit-flex:1;flex:1;&#34;&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#FDB967&#34;&gt;▉ #FDB967&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#FFB961&#34;&gt;▉ #FFB961&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div style=&#34;display:flex;&#34;&gt;
    &lt;b  style=&#34;width:60px;display:inline-block;&#34;&gt;建筑⑤：&lt;/b&gt;
    &lt;div style=&#34;-webkit-flex:1;flex:1;&#34;&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#F3B28B&#34;&gt;▉ #F3B28B&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#E1584E&#34;&gt;▉ #E1584E&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#FED2AD&#34;&gt;▉ #FED2AD&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div style=&#34;display:flex;&#34;&gt;
    &lt;b  style=&#34;width:60px;display:inline-block;&#34;&gt;建筑⑥：&lt;/b&gt;
    &lt;div style=&#34;-webkit-flex:1;flex:1;&#34;&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#FED27F&#34;&gt;▉ #FED27F&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#8B7E88&#34;&gt;▉ #8B7E88&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#FFE6A5&#34;&gt;▉ #FFE6A5&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#9E909D&#34;&gt;▉ #9E909D&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div style=&#34;display:flex;&#34;&gt;
    &lt;b  style=&#34;width:60px;display:inline-block;&#34;&gt;建筑⑦：&lt;/b&gt;
    &lt;div style=&#34;-webkit-flex:1;flex:1;&#34;&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#968895&#34;&gt;▉ #968895&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#F2B38C&#34;&gt;▉ #F2B38C&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#9E909D&#34;&gt;▉ #9E909D&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#FED2AD&#34;&gt;▉ #FED2AD&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div style=&#34;display:flex;&#34;&gt;
    &lt;b  style=&#34;width:60px;display:inline-block;&#34;&gt;背景：&lt;/b&gt;
    &lt;div style=&#34;-webkit-flex:1;flex:1;&#34;&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#DCF6FF&#34;&gt;▉ #DCF6FF&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color: #89E1FF&#34;&gt;▉  #89E1FF&lt;/span&gt;
        &lt;span style=&#34;width:90px;display:inline-block;color:#B8ECFC&#34;&gt;▉ #B8ECFC&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;!-- 
&lt;div  style=&#34;overflow:auto&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th colspan=&#34;9&#34;&gt;Color list&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;b&gt;地面&lt;/b&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;b&gt;建筑①&lt;/b&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;b&gt;建筑②&lt;/b&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;b&gt;建筑③&lt;/b&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;b&gt;建筑④&lt;/b&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;b&gt;建筑⑤&lt;/b&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;b&gt;建筑⑥&lt;/b&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;b&gt;建筑⑦&lt;/b&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;b&gt;背景&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;span style=&#34;color:#CDB7AA&#34;&gt;▉ #CDB7AA&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;span style=&#34;color:#FF6873&#34;&gt;▉ #FF6873&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;span style=&#34;color:#FFBE80&#34;&gt;▉ #FFBE80&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;span style=&#34;color:#E1584E&#34;&gt;▉ #E1584E&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;span style=&#34;color:#FDB967&#34;&gt;▉ #FDB967&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;span style=&#34;color:#F3B28B&#34;&gt;▉ #F3B28B&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;span style=&#34;color:#FED27F&#34;&gt;▉ #FED27F&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;span style=&#34;color:#968895&#34;&gt;▉ #968895&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;span style=&#34;color:#DCF6FF&#34;&gt;▉ #DCF6FF&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;span style=&#34;color:#FF678B&#34;&gt;▉ #FF678B&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;span style=&#34;color:#7CC9F0&#34;&gt;▉ #7CC9F0&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;span style=&#34;color:#E1584E&#34;&gt;▉ #E1584E&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;span style=&#34;color:#8B7E88&#34;&gt;▉ #8B7E88&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;span style=&#34;color:#F2B38C&#34;&gt;▉ #F2B38C&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;span style=&#34;color:#89E1FF&#34;&gt;▉ #89E1FF&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;span style=&#34;color:#FFA263&#34;&gt;▉ #FFA263&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34; colspan=&#34;8&#34;&gt;&lt;b&gt;高光&lt;/b&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;b&gt;云&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;span style=&#34;color:#BFA18E&#34;&gt;▉ #BFA18E&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;span style=&#34;color:#FF878B&#34;&gt;▉ #FF878B&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;span style=&#34;color:#FB9C6E&#34;&gt;▉ #FB9C6E&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;span style=&#34;color:#FDB967&#34;&gt;▉ #FDB967&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;span style=&#34;color:#FFB961&#34;&gt;▉ #FFB961&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;span style=&#34;color:#FED2AD&#34;&gt;▉ #FED2AD&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;span style=&#34;color:#FFE6A5&#34;&gt;▉ #FFE6A5&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;span style=&#34;color:#9E909D&#34;&gt;▉ #9E909D&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;span style=&#34;color:#B8ECFC&#34;&gt;▉ #B8ECFC&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;span style=&#34;color:#FDD5AB&#34;&gt;▉ #FDD5AB&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;span style=&#34;color:#ED6E65&#34;&gt;▉ #ED6E65&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;span style=&#34;color:#9E909D&#34;&gt;▉ #9E909D&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;span style=&#34;color:#FED2AD&#34;&gt;▉ #FED2AD&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;span style=&#34;color:#DCF6FF&#34;&gt;▉ #DCF6FF&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;span style=&#34;color:#A5D9F4&#34;&gt;▉ #A5D9F4&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;span style=&#34;color:#51B2E8&#34;&gt;▉ #51B2E8&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34; nowrap=&#34;nowrap&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;b&gt;边线&lt;/b&gt;&lt;/td&gt;
&lt;td colspan=&#34;8&#34;&gt;&lt;span style=&#34;color:#5F4A57&#34;&gt;▉ #5F4A57&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
 --&gt;

&lt;h2 id=&#34;然后以下是画图的具体步骤&#34;&gt;然后以下是画图的具体步骤&lt;/h2&gt;

&lt;p&gt;来源：&lt;a href=&#34;https://www.zcool.com.cn/article/ZODQwOTYw.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;【零基础学Ai教程】描边灯塔插图&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;作者：&lt;a href=&#34;https://www.zcool.com.cn/u/14824754&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Ai肖博士&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;000&#34; src=&#34;https://mogeko.github.io/images/040/000.jpg&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;001&#34; src=&#34;https://mogeko.github.io/images/040/001.jpg&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;002&#34; src=&#34;https://mogeko.github.io/images/040/002.jpg&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;003&#34; src=&#34;https://mogeko.github.io/images/040/003.jpg&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;004&#34; src=&#34;https://mogeko.github.io/images/040/004.jpg&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;005&#34; src=&#34;https://mogeko.github.io/images/040/005.jpg&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;006&#34; src=&#34;https://mogeko.github.io/images/040/006.jpg&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;007&#34; src=&#34;https://mogeko.github.io/images/040/007.jpg&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;008&#34; src=&#34;https://mogeko.github.io/images/040/008.jpg&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;009&#34; src=&#34;https://mogeko.github.io/images/040/009.jpg&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;010&#34; src=&#34;https://mogeko.github.io/images/040/010.jpg&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;011&#34; src=&#34;https://mogeko.github.io/images/040/011.jpg&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Student dormitory management</title>
      <link>https://mogeko.me/2018/039/</link>
      <pubDate>Sat, 22 Dec 2018 23:30:01 +0800</pubDate>
      
      <guid>https://mogeko.me/2018/039/</guid>
      <description>

&lt;!-- 
&lt;img alt=&#34;&#34; src=&#34;https://mogeko.github.io/images/038/&#34; &gt;
&lt;span class=&#34;spoiler&#34; &gt;&lt;/span&gt;
&amp;emsp;&amp;emsp;
 --&gt;

&lt;h1 id=&#34;demand-analysis&#34;&gt;Demand analysis&lt;/h1&gt;

&lt;p&gt;The system is designed to facilitate the management of student residences.&lt;/p&gt;

&lt;p&gt;Provide registration for students and teachers, check the student dormitory number, adjust the dormitory and other functions.&lt;/p&gt;

&lt;p&gt;At the same time, considering the need for maintenance and refurbishment of the dormitory, the system provides the function of submitting and accepting maintenance applications. After the student submits the repair application, the dormitory management will dispatch maintenance personnel to the maintenance.&lt;/p&gt;

&lt;h2 id=&#34;user-classification&#34;&gt;User classification&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Student (Male/Female)&lt;/strong&gt;: Managed by a boarding teacher&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dormitory manager&lt;/strong&gt;: Manage all rooms and students&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Maintenance personnel&lt;/strong&gt;: Including cleaning, maintenance personnel, etc&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;functions&#34;&gt;Functions&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Dormitory manager:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check student accommodation&lt;/li&gt;
&lt;li&gt;Reasonable allocation of rooms&lt;/li&gt;
&lt;li&gt;Adjust student dormitory allocation&lt;/li&gt;
&lt;li&gt;Delete students who are no longer staying&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Maintenance personnel:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Inquiry repair application form&lt;/li&gt;
&lt;li&gt;Query working hours&lt;/li&gt;
&lt;li&gt;Check the repair area (room id)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;database-design&#34;&gt;Database Design&lt;/h1&gt;

&lt;p&gt;This database includes a total of 5 tables: &lt;strong&gt;student_db, administrator_db, dormitry_db, maintenance_personnel_db, maintenance_application_db&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;student_db&lt;/strong&gt;: &lt;code&gt;{ID, name, sex, room number (room id)}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This table is used to record and manage different kinds of students.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;administrator_db&lt;/strong&gt;: &lt;code&gt;{ID, sex, managed room id}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This table is used to record the student’s boarding teacher and the objects they need to manage.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dormitry_db&lt;/strong&gt;: &lt;code&gt;{ID, types(male or female), sister teacher&#39;s id}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This table is used to record information about the dorms that need to be managed.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;maintenance_personnel_db&lt;/strong&gt;: &lt;code&gt;{ID, name, sex, position (project responsible for maintenance), working time, off work time}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This table is used to record information about maintenance personnel, including working hours, etc.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;maintenance_application_db&lt;/strong&gt;: &lt;code&gt;{room id, application for repair}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This tavle is used to record the repair application submitted by the student and is also the work content of the maintenance staff.&lt;/p&gt;

&lt;h3 id=&#34;contact&#34;&gt;Contact&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Student accommodation: &lt;code&gt;{student_db, dormitry_db}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Dormitory management: &lt;code&gt;{administrator_db, dormitry_db}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Repair application: &lt;code&gt;{student_db, maintenance_application_db}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Dormitory maintenance: &lt;code&gt;{maintenance_personnel_db, maintenance_application_db}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;e-r&#34;&gt;E - R&lt;/h2&gt;

&lt;p&gt;&lt;img alt=&#34;E-R&#34; src=&#34;https://mogeko.github.io/images/039/E-R.png&#34; &gt;&lt;/p&gt;

&lt;h2 id=&#34;table-design&#34;&gt;Table design&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;student_db:&lt;/strong&gt;&lt;/p&gt;

&lt;div  style=&#34;overflow:auto&#34;&gt;
&lt;table style=&#34;width:100%&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;列名&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;数据类型&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;允许 Null 值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;u&gt;student_id&lt;/u&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;nchar(10)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;student_name&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;nchar(10)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;student_sex&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;nchar(10)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;room_id&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;nchar(10)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;administrator_db:&lt;/strong&gt;&lt;/p&gt;

&lt;div  style=&#34;overflow:auto&#34;&gt;
&lt;table style=&#34;width:100%&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;列名&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;数据类型&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;允许 Null 值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;u&gt;administrator_id&lt;/u&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;nchar(10)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;administrator_name&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;nchar(10)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;administrator_sex&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;nchar(10)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;dormitry_db:&lt;/strong&gt;&lt;/p&gt;

&lt;div  style=&#34;overflow:auto&#34;&gt;
&lt;table style=&#34;width:100%&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;列名&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;数据类型&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;允许 Null 值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;u&gt;room_id&lt;/u&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;nchar(10)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;dormitry_types&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;nchar(10)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;administrator_id&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;nchar(10)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;maintenance_personnel_db:&lt;/strong&gt;&lt;/p&gt;

&lt;div  style=&#34;overflow:auto&#34;&gt;
&lt;table style=&#34;width:100%&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;列名&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;数据类型&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;允许 Null 值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;u&gt;maintenance_personne_id&lt;/u&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;nchar(10)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;maintenance_personnel_name&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;nchar(10)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;maintenance_personnel_sex&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;nchar(10)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;working_time&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;datetime&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;off_work_time&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;datetime&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;True&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;maintenance_application_db:&lt;/strong&gt;&lt;/p&gt;

&lt;div  style=&#34;overflow:auto&#34;&gt;
&lt;table style=&#34;width:100%&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;列名&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;数据类型&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;允许 Null 值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;u&gt;maintenance_application_id&lt;/u&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;int IDENTITY(1, 1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;maintenance_application&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;varchar(50)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;room_id&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;nchar(10)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;maintenance_personnel_id&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;nchar(10)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;work_status&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;bit DEFAULT(0)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h2 id=&#34;database-implementation&#34;&gt;Database implementation&lt;/h2&gt;

&lt;h3 id=&#34;case-data&#34;&gt;Case data&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;student_db:&lt;/strong&gt;&lt;/p&gt;

&lt;div  style=&#34;overflow:auto&#34;&gt;
&lt;table style=&#34;width:100%&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;student_id&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;student_name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;student_sex&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;room_id&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0001&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Mogeko&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Male&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;M101&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0002&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Ezie&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Female&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;F101&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0003&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Washington&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Male&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;M101&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0004&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Licoln&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Male&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;M102&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0005&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Daisy&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Female&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;F101&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0006&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Trump&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Male&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;M101&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0007&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Noah&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Male&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;M102&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0008&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Lucy&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Female&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;F101&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0009&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Obama&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Male&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;M101&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0010&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Lucy&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Female&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;F101&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;administrator_db:&lt;/strong&gt;&lt;/p&gt;

&lt;div style=&#34;overflow:auto&#34;&gt;
&lt;table style=&#34;width:100%&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;administrator_id&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;administrator_name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;administrator_sex&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;001&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Herrington&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Male&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;002&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Van&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Male&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;003&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Rossett&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Male&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;004&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Jade&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Female&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;005&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Eva&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Female&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;006&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;May&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Female&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;dormitry_db:&lt;/strong&gt;&lt;/p&gt;

&lt;div  style=&#34;overflow:auto&#34;&gt;
&lt;table style=&#34;width:100%&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;room_id&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;dormitry_types&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;administrator_id&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;M101&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Male&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;001&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;M102&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Male&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;001&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;M103&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Male&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;001&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;M104&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Male&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;002&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;M105&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Male&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;002&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;F101&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Female&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;004&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;F102&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Female&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;004&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;F103&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Female&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;004&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;F104&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Female&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;004&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;F105&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Female&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;004&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;maintenance_personnel_db:&lt;/strong&gt;&lt;/p&gt;

&lt;div  style=&#34;overflow:auto&#34;&gt;
&lt;table style=&#34;width:100%&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;maintenance_personnel_id&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;maintenance_personnel_name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;maintenance_personnel_sex&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;working_time&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;off_work_time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;001&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Roosevelt&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Male&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2018-12-22T09:00:00&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2018-12T22 22:00:00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;002&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Kennedy&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Male&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;003&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Nannie&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Female&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2018-12-22T09:00:00&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2018-12-22T22:00:00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;004&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Dawn&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Female&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;maintenance_application_db:&lt;/strong&gt;&lt;/p&gt;

&lt;div  style=&#34;overflow:auto&#34;&gt;
&lt;table style=&#34;width:100%&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;maintenance_application_id&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;maintenance_application&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;room_id&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;maintenance_personnel_id&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;work_status&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Door damage&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;M102&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;001&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Faucet damage&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;F101&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h2 id=&#34;import-case-data&#34;&gt;Import case data&lt;/h2&gt;

&lt;p&gt;Create the tables&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;/*
 Create tables
  - student_db
  - administrator_db
  - dormitry_db
  - maintenance_personnel_db
  - maintenance_application_db
 */
CREATE TABLE student_db
(
student_id nchar(10) NOT NULL PRIMARY KEY,
student_name nchar(10) NOT NULL,
student_sex nchar(10) NOT NULL,
room_id nchar(10) NOT NULL
)
CREATE TABLE administrator_db
(
administrator_id nchar(10) NOT NULL PRIMARY KEY,
administrator_name nchar(10) NOT NULL,
administrator_sex nchar(10) NOT NULL
)
CREATE TABLE dormitry_db
(
room_id nchar(10) NOT NULL PRIMARY KEY,
dormitry_types nchar(10) NOT NULL,
administrator_id nchar(10) NOT NULL
)
CREATE TABLE maintenance_personnel_db
(
maintenance_personnel_id nchar(10) NOT NULL PRIMARY KEY,
maintenance_personnel_name nchar(10) NOT NULL,
maintenance_personnel_sex nchar(10) NOT NULL,
working_time datetime,
off_work_time datetime
)
CREATE TABLE maintenance_application_db
(
maintenance_application_id int IDENTITY(1, 1) PRIMARY KEY,
maintenance_application varchar(50) NOT NULL,
room_id nchar(10) NOT NULL,
maintenance_personnel_id nchar(10),
work_status bit DEFAULT(0) NOT NULL,
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Set &lt;code&gt;FOREIHN KEY&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;/* Set the foreign key */

ALTER TABLE STUDENT_DB.dbo.student_db
ADD FOREIGN KEY (room_id)
REFERENCES dormitry_db(room_id)

ALTER TABLE STUDENT_DB.dbo.dormitry_db
ADD FOREIGN KEY (administrator_id)
REFERENCES administrator_db(administrator_id)

ALTER TABLE STUDENT_DB.dbo.maintenance_application_db
ADD FOREIGN KEY (room_id)
REFERENCES dormitry_db(room_id)

ALTER TABLE STUDENT_DB.dbo.maintenance_application_db
ADD FOREIGN KEY (maintenance_personnel_id)
REFERENCES maintenance_personnel_db(maintenance_personnel_id)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Insert data into the form &lt;code&gt;STUDENT_DB.dbo.administrator_db&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;/* Insert data into the form STUDENT_DB.dbo.administrator_db */
INSERT INTO STUDENT_DB.dbo.administrator_db
(administrator_id, administrator_name, administrator_sex)
VALUES(&#39;001&#39;, &#39;Herrington&#39;, &#39;Male&#39;)
INSERT INTO STUDENT_DB.dbo.administrator_db
(administrator_id, administrator_name, administrator_sex)
VALUES(&#39;002&#39;, &#39;Van&#39;, &#39;Male&#39;)
INSERT INTO STUDENT_DB.dbo.administrator_db
(administrator_id, administrator_name, administrator_sex)
VALUES(&#39;003&#39;, &#39;Rossett&#39;, &#39;Male&#39;)
INSERT INTO STUDENT_DB.dbo.administrator_db
(administrator_id, administrator_name, administrator_sex)
VALUES(&#39;004&#39;, &#39;Jade&#39;, &#39;Female&#39;)
INSERT INTO STUDENT_DB.dbo.administrator_db
(administrator_id, administrator_name, administrator_sex)
VALUES(&#39;005&#39;, &#39;Eva&#39;, &#39;Female&#39;)
INSERT INTO STUDENT_DB.dbo.administrator_db
(administrator_id, administrator_name, administrator_sex)
VALUES(&#39;006&#39;, &#39;May&#39;, &#39;Female&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Insert data into the form &lt;code&gt;STUDENT_DB.dbo.dormitry_db&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;/* Insert data into the form STUDENT_DB.dbo.dormitry_db */
INSERT INTO STUDENT_DB.dbo.dormitry_db
(room_id, dormitry_types, administrator_id)
VALUES(&#39;M101&#39;, &#39;Male&#39;, &#39;001&#39;)
INSERT INTO STUDENT_DB.dbo.dormitry_db
(room_id, dormitry_types, administrator_id)
VALUES(&#39;M102&#39;, &#39;Male&#39;, &#39;001&#39;)
INSERT INTO STUDENT_DB.dbo.dormitry_db
(room_id, dormitry_types, administrator_id)
VALUES(&#39;M103&#39;, &#39;Male&#39;, &#39;001&#39;)
INSERT INTO STUDENT_DB.dbo.dormitry_db
(room_id, dormitry_types, administrator_id)
VALUES(&#39;M104&#39;, &#39;Male&#39;, &#39;002&#39;)
INSERT INTO STUDENT_DB.dbo.dormitry_db
(room_id, dormitry_types, administrator_id)
VALUES(&#39;M105&#39;, &#39;Male&#39;, &#39;002&#39;)
INSERT INTO STUDENT_DB.dbo.dormitry_db
(room_id, dormitry_types, administrator_id)
VALUES(&#39;F101&#39;, &#39;Female&#39;, &#39;004&#39;)
INSERT INTO STUDENT_DB.dbo.dormitry_db
(room_id, dormitry_types, administrator_id)
VALUES(&#39;F102&#39;, &#39;Female&#39;, &#39;004&#39;)
INSERT INTO STUDENT_DB.dbo.dormitry_db
(room_id, dormitry_types, administrator_id)
VALUES(&#39;F103&#39;, &#39;Female&#39;, &#39;004&#39;)
INSERT INTO STUDENT_DB.dbo.dormitry_db
(room_id, dormitry_types, administrator_id)
VALUES(&#39;F104&#39;, &#39;Female&#39;, &#39;004&#39;)
INSERT INTO STUDENT_DB.dbo.dormitry_db
(room_id, dormitry_types, administrator_id)
VALUES(&#39;F105&#39;, &#39;Female&#39;, &#39;004&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Insert data into the form &lt;code&gt;STUDENT_DB.dbo.student_db&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;/* Insert data into the form STUDENT_DB.dbo.student_db */
INSERT INTO STUDENT_DB.dbo.student_db
(student_id, student_name, student_sex, room_id)
VALUES(&#39;0001&#39;, &#39;Mogeko&#39;, &#39;Male&#39;, &#39;M101&#39;)
INSERT INTO STUDENT_DB.dbo.student_db
(student_id, student_name, student_sex, room_id)
VALUES(&#39;0002&#39;, &#39;Ezie&#39;, &#39;Female&#39;, &#39;F101&#39;)
INSERT INTO STUDENT_DB.dbo.student_db
(student_id, student_name, student_sex, room_id)
VALUES(&#39;0003&#39;, &#39;Washington&#39;, &#39;Male&#39;, &#39;M101&#39;)
INSERT INTO STUDENT_DB.dbo.student_db
(student_id, student_name, student_sex, room_id)
VALUES(&#39;0004&#39;, &#39;Licoln&#39;, &#39;Male&#39;, &#39;M102&#39;)
INSERT INTO STUDENT_DB.dbo.student_db
(student_id, student_name, student_sex, room_id)
VALUES(&#39;0005&#39;, &#39;Daisy&#39;, &#39;Female&#39;, &#39;F101&#39;)
INSERT INTO STUDENT_DB.dbo.student_db
(student_id, student_name, student_sex, room_id)
VALUES(&#39;0006&#39;, &#39;Trump&#39;, &#39;Male&#39;, &#39;M101&#39;)
INSERT INTO STUDENT_DB.dbo.student_db
(student_id, student_name, student_sex, room_id)
VALUES(&#39;0007&#39;, &#39;Noah&#39;, &#39;Male&#39;, &#39;M102&#39;)
INSERT INTO STUDENT_DB.dbo.student_db
(student_id, student_name, student_sex, room_id)
VALUES(&#39;0008&#39;, &#39;Lucy&#39;, &#39;Female&#39;, &#39;F101&#39;)
INSERT INTO STUDENT_DB.dbo.student_db
(student_id, student_name, student_sex, room_id)
VALUES(&#39;0009&#39;, &#39;Obama&#39;, &#39;Male&#39;, &#39;M101&#39;)
INSERT INTO STUDENT_DB.dbo.student_db
(student_id, student_name, student_sex, room_id)
VALUES(&#39;0010&#39;, &#39;Lucy&#39;, &#39;Female&#39;, &#39;F101&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Insert data into the form &lt;code&gt;STUDENT_DB.dbo.maintenance_application_db&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;/* Insert data into the form STUDENT_DB.dbo.maintenance_application_db */
INSERT INTO STUDENT_DB.dbo.maintenance_application_db
(maintenance_application, room_id)
VALUES (&#39;Door damage&#39;, &#39;M102&#39;)
INSERT INTO STUDENT_DB.dbo.maintenance_application_db
(maintenance_application, room_id)
VALUES (&#39;Faucet damage&#39;, &#39;F102&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Insert data into the form &lt;code&gt;STUDENT_DB.dbo.maintenance_personnel_db&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;/* Insert data into the form STUDENT_DB.dbo.maintenance_personnel_db */
INSERT INTO STUDENT_DB.dbo.maintenance_personnel_db
(maintenance_personnel_id, maintenance_personnel_name, maintenance_personnel_sex, working_time, off_work_time)
VALUES(&#39;001&#39;, &#39;Roosevelt&#39;, &#39;Male&#39;, &#39;2018-12-22T09:00:00&#39;, &#39;2018-12-22T22:00:00&#39;)
INSERT INTO STUDENT_DB.dbo.maintenance_personnel_db
(maintenance_personnel_id, maintenance_personnel_name, maintenance_personnel_sex)
VALUES(&#39;002&#39;, &#39;Kennedy&#39;, &#39;Male&#39;)
INSERT INTO STUDENT_DB.dbo.maintenance_personnel_db
(maintenance_personnel_id, maintenance_personnel_name, maintenance_personnel_sex, working_time, off_work_time)
VALUES(&#39;003&#39;, &#39;Nannie&#39;, &#39;Female&#39;, &#39;2018-12-22T09:00:00&#39;, &#39;2018-12-22T22:00:00&#39;)
INSERT INTO STUDENT_DB.dbo.maintenance_personnel_db
(maintenance_personnel_id, maintenance_personnel_name, maintenance_personnel_sex)
VALUES(&#39;004&#39;, &#39;Dawn&#39;, &#39;Female&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example-features&#34;&gt;(Example) Features&lt;/h2&gt;

&lt;p&gt;Check student accommodation information.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;/*
Check student accommodation information
INPUT @stu_name -- The name of the student being queried
*/

DECLARE @stu_name nchar(10)
-- Check accommodation information in Mogeko
SET @stu_name = &#39;Mogeko&#39;

SELECT student_id, student_name, student_sex, room_id
FROM STUDENT_DB.dbo.student_db
WHERE student_name=@stu_name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Newborn stay.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;/*
Newborn stay
INPUT @Stu_id -- The ID of nweborn
INPUT @Stu_name -- The name of newborn
INPUT @Stu_sex -- The gender of newborn
INPUT @room_id -- The room number of newborn
*/

DECLARE @Stu_id nchar(10)
DECLARE @Stu_name nchar(10)
DECLARE @Stu_sex nchar(10)
DECLARE @room_id nchar(10)

-- New student information
SET @Stu_id = &#39;0011&#39;
SET @Stu_name = &#39;Bob&#39;
SET @Stu_sex = &#39;Male&#39;
SET @room_id = &#39;M103&#39;

INSERT INTO STUDENT_DB.dbo.student_db
(student_id, student_name, student_sex, room_id)
VALUES (@Stu_id, @Stu_name, @Stu_sex, @room_id)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Students move out of the bedroom.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;/*
Students move out of the bedroom
INPUT Stu_id -- The ID of the student
*/

DECLARE @Stu_id nchar(10)
-- Input the ID of the student
SET @Stu_id = &#39;0011&#39;

DELETE FROM STUDENT_DB.dbo.student_db
WHERE student_id = @Stu_id
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Submit a repair request.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;/*
Submit a repair request
INPUT @request -- Repair application
INPUT @room_id -- Repair location
*/

DECLARE @requst varchar(50)
DECLARE @room_id nchar(10)

-- Repair application information
SET @requst = &#39;The cabinet was damaged&#39;
SET @room_id = &#39;M101&#39;

INSERT INTO STUDENT_DB.dbo.maintenance_application_db
(maintenance_application, room_id)
VALUES (@requst, @room_id)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check the repair application list.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;/*
Check the repair application list
INPUT @staff_name -- Name of the maintenance person
*/

DECLARE @staff_name nchar(10)

-- Input the name of the maintenance person
SET @staff_name = &#39;Roosevelt&#39;

SELECT maintenance_application_id, maintenance_application, room_id
FROM STUDENT_DB.dbo.maintenance_application_db
WHERE (maintenance_personnel_id is NULL) and room_id in (
	SELECT room_id
	FROM STUDENT_DB.dbo.dormitry_db
	WHERE dormitry_types = (
		SELECT maintenance_personnel_sex
		FROM STUDENT_DB.dbo.maintenance_personnel_db
		WHERE maintenance_personnel_name = @staff_name
	)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Accept repair request.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;/*
Accept repair request
INPUT @staff_id -- ID of the maintenance person
INPUT @application_id -- ID of the maintenance application
*/

DECLARE @staff_id nchar(10)
DECLARE @application_id int

-- Input the ID of the maintenance person
SET @staff_id = &#39;001&#39;
-- Input the ID of the maintenance application
SET @application_id = 3

UPDATE STUDENT_DB.dbo.maintenance_application_db
SET maintenance_personnel_id = @staff_id
WHERE maintenance_application_id = @application_id
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Complete repair.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;/*
Complete repair
INPUT @application_id -- ID of the maintenance application
*/

DECLARE @application_id int

-- Input the ID of the maintenance application
SET @application_id = 3

UPDATE STUDENT_DB.dbo.maintenance_application_db
SET work_status = 1
WHERE maintenance_application_id = @application_id
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>